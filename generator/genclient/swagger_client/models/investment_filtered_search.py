# coding: utf-8

"""
    Data Hub API

    Data Hub API

    OpenAPI spec version: 1.0.0
    Contact: jim.smith@digital.trade.gov.uk
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class InvestmentFilteredSearch(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, client_relationship_manager=None, description=None, estimated_land_date_after=None, estimated_land_date_before=None, investor_company=None, investment_type=None, stage=None, sector=None):
        """
        InvestmentFilteredSearch - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'client_relationship_manager': 'str',
            'description': 'str',
            'estimated_land_date_after': 'date',
            'estimated_land_date_before': 'date',
            'investor_company': 'str',
            'investment_type': 'str',
            'stage': 'str',
            'sector': 'str'
        }

        self.attribute_map = {
            'client_relationship_manager': 'client_relationship_manager',
            'description': 'description',
            'estimated_land_date_after': 'estimated_land_date_after',
            'estimated_land_date_before': 'estimated_land_date_before',
            'investor_company': 'investor_company',
            'investment_type': 'investment_type',
            'stage': 'stage',
            'sector': 'sector'
        }

        self._client_relationship_manager = client_relationship_manager
        self._description = description
        self._estimated_land_date_after = estimated_land_date_after
        self._estimated_land_date_before = estimated_land_date_before
        self._investor_company = investor_company
        self._investment_type = investment_type
        self._stage = stage
        self._sector = sector

    @property
    def client_relationship_manager(self):
        """
        Gets the client_relationship_manager of this InvestmentFilteredSearch.

        :return: The client_relationship_manager of this InvestmentFilteredSearch.
        :rtype: str
        """
        return self._client_relationship_manager

    @client_relationship_manager.setter
    def client_relationship_manager(self, client_relationship_manager):
        """
        Sets the client_relationship_manager of this InvestmentFilteredSearch.

        :param client_relationship_manager: The client_relationship_manager of this InvestmentFilteredSearch.
        :type: str
        """

        self._client_relationship_manager = client_relationship_manager

    @property
    def description(self):
        """
        Gets the description of this InvestmentFilteredSearch.

        :return: The description of this InvestmentFilteredSearch.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this InvestmentFilteredSearch.

        :param description: The description of this InvestmentFilteredSearch.
        :type: str
        """

        self._description = description

    @property
    def estimated_land_date_after(self):
        """
        Gets the estimated_land_date_after of this InvestmentFilteredSearch.

        :return: The estimated_land_date_after of this InvestmentFilteredSearch.
        :rtype: date
        """
        return self._estimated_land_date_after

    @estimated_land_date_after.setter
    def estimated_land_date_after(self, estimated_land_date_after):
        """
        Sets the estimated_land_date_after of this InvestmentFilteredSearch.

        :param estimated_land_date_after: The estimated_land_date_after of this InvestmentFilteredSearch.
        :type: date
        """

        self._estimated_land_date_after = estimated_land_date_after

    @property
    def estimated_land_date_before(self):
        """
        Gets the estimated_land_date_before of this InvestmentFilteredSearch.

        :return: The estimated_land_date_before of this InvestmentFilteredSearch.
        :rtype: date
        """
        return self._estimated_land_date_before

    @estimated_land_date_before.setter
    def estimated_land_date_before(self, estimated_land_date_before):
        """
        Sets the estimated_land_date_before of this InvestmentFilteredSearch.

        :param estimated_land_date_before: The estimated_land_date_before of this InvestmentFilteredSearch.
        :type: date
        """

        self._estimated_land_date_before = estimated_land_date_before

    @property
    def investor_company(self):
        """
        Gets the investor_company of this InvestmentFilteredSearch.

        :return: The investor_company of this InvestmentFilteredSearch.
        :rtype: str
        """
        return self._investor_company

    @investor_company.setter
    def investor_company(self, investor_company):
        """
        Sets the investor_company of this InvestmentFilteredSearch.

        :param investor_company: The investor_company of this InvestmentFilteredSearch.
        :type: str
        """

        self._investor_company = investor_company

    @property
    def investment_type(self):
        """
        Gets the investment_type of this InvestmentFilteredSearch.

        :return: The investment_type of this InvestmentFilteredSearch.
        :rtype: str
        """
        return self._investment_type

    @investment_type.setter
    def investment_type(self, investment_type):
        """
        Sets the investment_type of this InvestmentFilteredSearch.

        :param investment_type: The investment_type of this InvestmentFilteredSearch.
        :type: str
        """

        self._investment_type = investment_type

    @property
    def stage(self):
        """
        Gets the stage of this InvestmentFilteredSearch.

        :return: The stage of this InvestmentFilteredSearch.
        :rtype: str
        """
        return self._stage

    @stage.setter
    def stage(self, stage):
        """
        Sets the stage of this InvestmentFilteredSearch.

        :param stage: The stage of this InvestmentFilteredSearch.
        :type: str
        """

        self._stage = stage

    @property
    def sector(self):
        """
        Gets the sector of this InvestmentFilteredSearch.

        :return: The sector of this InvestmentFilteredSearch.
        :rtype: str
        """
        return self._sector

    @sector.setter
    def sector(self, sector):
        """
        Sets the sector of this InvestmentFilteredSearch.

        :param sector: The sector of this InvestmentFilteredSearch.
        :type: str
        """

        self._sector = sector

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, InvestmentFilteredSearch):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
