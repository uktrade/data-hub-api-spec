# coding: utf-8

"""
    Data Hub API

    Data Hub API

    OpenAPI spec version: 1.0.0
    Contact: jim.smith@digital.trade.gov.uk
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class InvestmentProject(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, approved_commitment_to_invest=None, approved_fdi=None, approved_good_value=None, approved_high_value=None, approved_landed=None, approved_non_fdi=None, actual_land_date=None, actual_land_date_documents=None, business_activities=None, client_contacts=None, client_relationship_manager=None, description=None, estimated_land_date=None, fdi_type=None, fdi_type_documents=None, id=None, intermediate_company=None, investor_company=None, investment_type=None, name=None, nda_signed=None, non_fdi_type=None, not_shareable_reason=None, operations_commenced_documents=None, stage=None, project_code=None, project_shareable=None, referral_source_activity=None, referral_source_activity_marketing=None, referral_source_activity_website=None, referral_source_activity_event=None, referral_source_advisor=None, sector=None, value_complete=None, total_investment=None, likelihood_of_landing=None, priority=None, total_investment_documents=None, client_cannot_provide_total_investment=None, foreign_equity_investment=None, foreign_equity_investment_documents=None, client_cannot_provide_foreign_investment=None, government_assistance=None, number_new_jobs=None, number_new_jobs_documents=None, number_safeguarded_jobs=None, number_safeguarded_jobs_documents=None, r_and_d_budget=None, r_and_d_budget_documents=None, non_fdi_r_and_d_budget=None, new_tech_to_uk=None, new_tech_to_uk_documents=None, export_revenue=None, export_revenue_documents=None, average_salary=None, average_salary_documents=None, requirements_complete=None, client_requirements=None, site_decided=False, address_line_1=None, address_line_2=None, address_line_3=None, client_considering_other_countries=None, competitor_countries=None, uk_region_locations=None, strategic_drivers=None, uk_company=None, address_postcode=None, team_members=None):
        """
        InvestmentProject - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'approved_commitment_to_invest': 'bool',
            'approved_fdi': 'bool',
            'approved_good_value': 'bool',
            'approved_high_value': 'bool',
            'approved_landed': 'bool',
            'approved_non_fdi': 'bool',
            'actual_land_date': 'date',
            'actual_land_date_documents': 'Documents',
            'business_activities': 'BusinessActivities',
            'client_contacts': 'ContactArray',
            'client_relationship_manager': 'Adviser',
            'description': 'str',
            'estimated_land_date': 'date',
            'fdi_type': 'FDIType',
            'fdi_type_documents': 'Documents',
            'id': 'str',
            'intermediate_company': 'CompanySlim',
            'investor_company': 'CompanySlim',
            'investment_type': 'InvestmentType',
            'name': 'str',
            'nda_signed': 'bool',
            'non_fdi_type': 'NonFDIType',
            'not_shareable_reason': 'str',
            'operations_commenced_documents': 'Documents',
            'stage': 'Stage',
            'project_code': 'str',
            'project_shareable': 'bool',
            'referral_source_activity': 'ReferralSourceActivity',
            'referral_source_activity_marketing': 'ReferralSourceActivityMarketing',
            'referral_source_activity_website': 'ReferralSourceActivityWebsite',
            'referral_source_activity_event': 'str',
            'referral_source_advisor': 'Adviser',
            'sector': 'Sector',
            'value_complete': 'bool',
            'total_investment': 'int',
            'likelihood_of_landing': 'int',
            'priority': 'str',
            'total_investment_documents': 'Documents',
            'client_cannot_provide_total_investment': 'bool',
            'foreign_equity_investment': 'int',
            'foreign_equity_investment_documents': 'Documents',
            'client_cannot_provide_foreign_investment': 'bool',
            'government_assistance': 'bool',
            'number_new_jobs': 'int',
            'number_new_jobs_documents': 'Documents',
            'number_safeguarded_jobs': 'int',
            'number_safeguarded_jobs_documents': 'Documents',
            'r_and_d_budget': 'bool',
            'r_and_d_budget_documents': 'Documents',
            'non_fdi_r_and_d_budget': 'bool',
            'new_tech_to_uk': 'bool',
            'new_tech_to_uk_documents': 'Documents',
            'export_revenue': 'bool',
            'export_revenue_documents': 'Documents',
            'average_salary': 'InvestmentProjectAverageSalary',
            'average_salary_documents': 'Documents',
            'requirements_complete': 'bool',
            'client_requirements': 'str',
            'site_decided': 'bool',
            'address_line_1': 'str',
            'address_line_2': 'str',
            'address_line_3': 'str',
            'client_considering_other_countries': 'bool',
            'competitor_countries': 'CountryArray',
            'uk_region_locations': 'UKRegions',
            'strategic_drivers': 'StrategicDriverArray',
            'uk_company': 'CompanySlim',
            'address_postcode': 'str',
            'team_members': 'InvestmentTeamMemberArray'
        }

        self.attribute_map = {
            'approved_commitment_to_invest': 'approved_commitment_to_invest',
            'approved_fdi': 'approved_fdi',
            'approved_good_value': 'approved_good_value',
            'approved_high_value': 'approved_high_value',
            'approved_landed': 'approved_landed',
            'approved_non_fdi': 'approved_non_fdi',
            'actual_land_date': 'actual_land_date',
            'actual_land_date_documents': 'actual_land_date_documents',
            'business_activities': 'business_activities',
            'client_contacts': 'client_contacts',
            'client_relationship_manager': 'client_relationship_manager',
            'description': 'description',
            'estimated_land_date': 'estimated_land_date',
            'fdi_type': 'fdi_type',
            'fdi_type_documents': 'fdi_type_documents',
            'id': 'id',
            'intermediate_company': 'intermediate_company',
            'investor_company': 'investor_company',
            'investment_type': 'investment_type',
            'name': 'name',
            'nda_signed': 'nda_signed',
            'non_fdi_type': 'non_fdi_type',
            'not_shareable_reason': 'not_shareable_reason',
            'operations_commenced_documents': 'operations_commenced_documents',
            'stage': 'stage',
            'project_code': 'project_code',
            'project_shareable': 'project_shareable',
            'referral_source_activity': 'referral_source_activity',
            'referral_source_activity_marketing': 'referral_source_activity_marketing',
            'referral_source_activity_website': 'referral_source_activity_website',
            'referral_source_activity_event': 'referral_source_activity_event',
            'referral_source_advisor': 'referral_source_advisor',
            'sector': 'sector',
            'value_complete': 'value_complete',
            'total_investment': 'total_investment',
            'likelihood_of_landing': 'likelihood_of_landing',
            'priority': 'priority',
            'total_investment_documents': 'total_investment_documents',
            'client_cannot_provide_total_investment': 'client_cannot_provide_total_investment',
            'foreign_equity_investment': 'foreign_equity_investment',
            'foreign_equity_investment_documents': 'foreign_equity_investment_documents',
            'client_cannot_provide_foreign_investment': 'client_cannot_provide_foreign_investment',
            'government_assistance': 'government_assistance',
            'number_new_jobs': 'number_new_jobs',
            'number_new_jobs_documents': 'number_new_jobs_documents',
            'number_safeguarded_jobs': 'number_safeguarded_jobs',
            'number_safeguarded_jobs_documents': 'number_safeguarded_jobs_documents',
            'r_and_d_budget': 'r_and_d_budget',
            'r_and_d_budget_documents': 'r_and_d_budget_documents',
            'non_fdi_r_and_d_budget': 'non_fdi_r_and_d_budget',
            'new_tech_to_uk': 'new_tech_to_uk',
            'new_tech_to_uk_documents': 'new_tech_to_uk_documents',
            'export_revenue': 'export_revenue',
            'export_revenue_documents': 'export_revenue_documents',
            'average_salary': 'average_salary',
            'average_salary_documents': 'average_salary_documents',
            'requirements_complete': 'requirements_complete',
            'client_requirements': 'client_requirements',
            'site_decided': 'site_decided',
            'address_line_1': 'address_line_1',
            'address_line_2': 'address_line_2',
            'address_line_3': 'address_line_3',
            'client_considering_other_countries': 'client_considering_other_countries',
            'competitor_countries': 'competitor_countries',
            'uk_region_locations': 'uk_region_locations',
            'strategic_drivers': 'strategic_drivers',
            'uk_company': 'uk_company',
            'address_postcode': 'address_postcode',
            'team_members': 'team_members'
        }

        self._approved_commitment_to_invest = approved_commitment_to_invest
        self._approved_fdi = approved_fdi
        self._approved_good_value = approved_good_value
        self._approved_high_value = approved_high_value
        self._approved_landed = approved_landed
        self._approved_non_fdi = approved_non_fdi
        self._actual_land_date = actual_land_date
        self._actual_land_date_documents = actual_land_date_documents
        self._business_activities = business_activities
        self._client_contacts = client_contacts
        self._client_relationship_manager = client_relationship_manager
        self._description = description
        self._estimated_land_date = estimated_land_date
        self._fdi_type = fdi_type
        self._fdi_type_documents = fdi_type_documents
        self._id = id
        self._intermediate_company = intermediate_company
        self._investor_company = investor_company
        self._investment_type = investment_type
        self._name = name
        self._nda_signed = nda_signed
        self._non_fdi_type = non_fdi_type
        self._not_shareable_reason = not_shareable_reason
        self._operations_commenced_documents = operations_commenced_documents
        self._stage = stage
        self._project_code = project_code
        self._project_shareable = project_shareable
        self._referral_source_activity = referral_source_activity
        self._referral_source_activity_marketing = referral_source_activity_marketing
        self._referral_source_activity_website = referral_source_activity_website
        self._referral_source_activity_event = referral_source_activity_event
        self._referral_source_advisor = referral_source_advisor
        self._sector = sector
        self._value_complete = value_complete
        self._total_investment = total_investment
        self._likelihood_of_landing = likelihood_of_landing
        self._priority = priority
        self._total_investment_documents = total_investment_documents
        self._client_cannot_provide_total_investment = client_cannot_provide_total_investment
        self._foreign_equity_investment = foreign_equity_investment
        self._foreign_equity_investment_documents = foreign_equity_investment_documents
        self._client_cannot_provide_foreign_investment = client_cannot_provide_foreign_investment
        self._government_assistance = government_assistance
        self._number_new_jobs = number_new_jobs
        self._number_new_jobs_documents = number_new_jobs_documents
        self._number_safeguarded_jobs = number_safeguarded_jobs
        self._number_safeguarded_jobs_documents = number_safeguarded_jobs_documents
        self._r_and_d_budget = r_and_d_budget
        self._r_and_d_budget_documents = r_and_d_budget_documents
        self._non_fdi_r_and_d_budget = non_fdi_r_and_d_budget
        self._new_tech_to_uk = new_tech_to_uk
        self._new_tech_to_uk_documents = new_tech_to_uk_documents
        self._export_revenue = export_revenue
        self._export_revenue_documents = export_revenue_documents
        self._average_salary = average_salary
        self._average_salary_documents = average_salary_documents
        self._requirements_complete = requirements_complete
        self._client_requirements = client_requirements
        self._site_decided = site_decided
        self._address_line_1 = address_line_1
        self._address_line_2 = address_line_2
        self._address_line_3 = address_line_3
        self._client_considering_other_countries = client_considering_other_countries
        self._competitor_countries = competitor_countries
        self._uk_region_locations = uk_region_locations
        self._strategic_drivers = strategic_drivers
        self._uk_company = uk_company
        self._address_postcode = address_postcode
        self._team_members = team_members

    @property
    def approved_commitment_to_invest(self):
        """
        Gets the approved_commitment_to_invest of this InvestmentProject.

        :return: The approved_commitment_to_invest of this InvestmentProject.
        :rtype: bool
        """
        return self._approved_commitment_to_invest

    @approved_commitment_to_invest.setter
    def approved_commitment_to_invest(self, approved_commitment_to_invest):
        """
        Sets the approved_commitment_to_invest of this InvestmentProject.

        :param approved_commitment_to_invest: The approved_commitment_to_invest of this InvestmentProject.
        :type: bool
        """

        self._approved_commitment_to_invest = approved_commitment_to_invest

    @property
    def approved_fdi(self):
        """
        Gets the approved_fdi of this InvestmentProject.

        :return: The approved_fdi of this InvestmentProject.
        :rtype: bool
        """
        return self._approved_fdi

    @approved_fdi.setter
    def approved_fdi(self, approved_fdi):
        """
        Sets the approved_fdi of this InvestmentProject.

        :param approved_fdi: The approved_fdi of this InvestmentProject.
        :type: bool
        """

        self._approved_fdi = approved_fdi

    @property
    def approved_good_value(self):
        """
        Gets the approved_good_value of this InvestmentProject.

        :return: The approved_good_value of this InvestmentProject.
        :rtype: bool
        """
        return self._approved_good_value

    @approved_good_value.setter
    def approved_good_value(self, approved_good_value):
        """
        Sets the approved_good_value of this InvestmentProject.

        :param approved_good_value: The approved_good_value of this InvestmentProject.
        :type: bool
        """

        self._approved_good_value = approved_good_value

    @property
    def approved_high_value(self):
        """
        Gets the approved_high_value of this InvestmentProject.

        :return: The approved_high_value of this InvestmentProject.
        :rtype: bool
        """
        return self._approved_high_value

    @approved_high_value.setter
    def approved_high_value(self, approved_high_value):
        """
        Sets the approved_high_value of this InvestmentProject.

        :param approved_high_value: The approved_high_value of this InvestmentProject.
        :type: bool
        """

        self._approved_high_value = approved_high_value

    @property
    def approved_landed(self):
        """
        Gets the approved_landed of this InvestmentProject.

        :return: The approved_landed of this InvestmentProject.
        :rtype: bool
        """
        return self._approved_landed

    @approved_landed.setter
    def approved_landed(self, approved_landed):
        """
        Sets the approved_landed of this InvestmentProject.

        :param approved_landed: The approved_landed of this InvestmentProject.
        :type: bool
        """

        self._approved_landed = approved_landed

    @property
    def approved_non_fdi(self):
        """
        Gets the approved_non_fdi of this InvestmentProject.

        :return: The approved_non_fdi of this InvestmentProject.
        :rtype: bool
        """
        return self._approved_non_fdi

    @approved_non_fdi.setter
    def approved_non_fdi(self, approved_non_fdi):
        """
        Sets the approved_non_fdi of this InvestmentProject.

        :param approved_non_fdi: The approved_non_fdi of this InvestmentProject.
        :type: bool
        """

        self._approved_non_fdi = approved_non_fdi

    @property
    def actual_land_date(self):
        """
        Gets the actual_land_date of this InvestmentProject.

        :return: The actual_land_date of this InvestmentProject.
        :rtype: date
        """
        return self._actual_land_date

    @actual_land_date.setter
    def actual_land_date(self, actual_land_date):
        """
        Sets the actual_land_date of this InvestmentProject.

        :param actual_land_date: The actual_land_date of this InvestmentProject.
        :type: date
        """

        self._actual_land_date = actual_land_date

    @property
    def actual_land_date_documents(self):
        """
        Gets the actual_land_date_documents of this InvestmentProject.

        :return: The actual_land_date_documents of this InvestmentProject.
        :rtype: Documents
        """
        return self._actual_land_date_documents

    @actual_land_date_documents.setter
    def actual_land_date_documents(self, actual_land_date_documents):
        """
        Sets the actual_land_date_documents of this InvestmentProject.

        :param actual_land_date_documents: The actual_land_date_documents of this InvestmentProject.
        :type: Documents
        """

        self._actual_land_date_documents = actual_land_date_documents

    @property
    def business_activities(self):
        """
        Gets the business_activities of this InvestmentProject.

        :return: The business_activities of this InvestmentProject.
        :rtype: BusinessActivities
        """
        return self._business_activities

    @business_activities.setter
    def business_activities(self, business_activities):
        """
        Sets the business_activities of this InvestmentProject.

        :param business_activities: The business_activities of this InvestmentProject.
        :type: BusinessActivities
        """
        if business_activities is None:
            raise ValueError("Invalid value for `business_activities`, must not be `None`")

        self._business_activities = business_activities

    @property
    def client_contacts(self):
        """
        Gets the client_contacts of this InvestmentProject.

        :return: The client_contacts of this InvestmentProject.
        :rtype: ContactArray
        """
        return self._client_contacts

    @client_contacts.setter
    def client_contacts(self, client_contacts):
        """
        Sets the client_contacts of this InvestmentProject.

        :param client_contacts: The client_contacts of this InvestmentProject.
        :type: ContactArray
        """
        if client_contacts is None:
            raise ValueError("Invalid value for `client_contacts`, must not be `None`")

        self._client_contacts = client_contacts

    @property
    def client_relationship_manager(self):
        """
        Gets the client_relationship_manager of this InvestmentProject.

        :return: The client_relationship_manager of this InvestmentProject.
        :rtype: Adviser
        """
        return self._client_relationship_manager

    @client_relationship_manager.setter
    def client_relationship_manager(self, client_relationship_manager):
        """
        Sets the client_relationship_manager of this InvestmentProject.

        :param client_relationship_manager: The client_relationship_manager of this InvestmentProject.
        :type: Adviser
        """
        if client_relationship_manager is None:
            raise ValueError("Invalid value for `client_relationship_manager`, must not be `None`")

        self._client_relationship_manager = client_relationship_manager

    @property
    def description(self):
        """
        Gets the description of this InvestmentProject.

        :return: The description of this InvestmentProject.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this InvestmentProject.

        :param description: The description of this InvestmentProject.
        :type: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")

        self._description = description

    @property
    def estimated_land_date(self):
        """
        Gets the estimated_land_date of this InvestmentProject.

        :return: The estimated_land_date of this InvestmentProject.
        :rtype: date
        """
        return self._estimated_land_date

    @estimated_land_date.setter
    def estimated_land_date(self, estimated_land_date):
        """
        Sets the estimated_land_date of this InvestmentProject.

        :param estimated_land_date: The estimated_land_date of this InvestmentProject.
        :type: date
        """
        if estimated_land_date is None:
            raise ValueError("Invalid value for `estimated_land_date`, must not be `None`")

        self._estimated_land_date = estimated_land_date

    @property
    def fdi_type(self):
        """
        Gets the fdi_type of this InvestmentProject.

        :return: The fdi_type of this InvestmentProject.
        :rtype: FDIType
        """
        return self._fdi_type

    @fdi_type.setter
    def fdi_type(self, fdi_type):
        """
        Sets the fdi_type of this InvestmentProject.

        :param fdi_type: The fdi_type of this InvestmentProject.
        :type: FDIType
        """

        self._fdi_type = fdi_type

    @property
    def fdi_type_documents(self):
        """
        Gets the fdi_type_documents of this InvestmentProject.

        :return: The fdi_type_documents of this InvestmentProject.
        :rtype: Documents
        """
        return self._fdi_type_documents

    @fdi_type_documents.setter
    def fdi_type_documents(self, fdi_type_documents):
        """
        Sets the fdi_type_documents of this InvestmentProject.

        :param fdi_type_documents: The fdi_type_documents of this InvestmentProject.
        :type: Documents
        """

        self._fdi_type_documents = fdi_type_documents

    @property
    def id(self):
        """
        Gets the id of this InvestmentProject.

        :return: The id of this InvestmentProject.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this InvestmentProject.

        :param id: The id of this InvestmentProject.
        :type: str
        """

        self._id = id

    @property
    def intermediate_company(self):
        """
        Gets the intermediate_company of this InvestmentProject.

        :return: The intermediate_company of this InvestmentProject.
        :rtype: CompanySlim
        """
        return self._intermediate_company

    @intermediate_company.setter
    def intermediate_company(self, intermediate_company):
        """
        Sets the intermediate_company of this InvestmentProject.

        :param intermediate_company: The intermediate_company of this InvestmentProject.
        :type: CompanySlim
        """

        self._intermediate_company = intermediate_company

    @property
    def investor_company(self):
        """
        Gets the investor_company of this InvestmentProject.

        :return: The investor_company of this InvestmentProject.
        :rtype: CompanySlim
        """
        return self._investor_company

    @investor_company.setter
    def investor_company(self, investor_company):
        """
        Sets the investor_company of this InvestmentProject.

        :param investor_company: The investor_company of this InvestmentProject.
        :type: CompanySlim
        """
        if investor_company is None:
            raise ValueError("Invalid value for `investor_company`, must not be `None`")

        self._investor_company = investor_company

    @property
    def investment_type(self):
        """
        Gets the investment_type of this InvestmentProject.

        :return: The investment_type of this InvestmentProject.
        :rtype: InvestmentType
        """
        return self._investment_type

    @investment_type.setter
    def investment_type(self, investment_type):
        """
        Sets the investment_type of this InvestmentProject.

        :param investment_type: The investment_type of this InvestmentProject.
        :type: InvestmentType
        """
        if investment_type is None:
            raise ValueError("Invalid value for `investment_type`, must not be `None`")

        self._investment_type = investment_type

    @property
    def name(self):
        """
        Gets the name of this InvestmentProject.

        :return: The name of this InvestmentProject.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this InvestmentProject.

        :param name: The name of this InvestmentProject.
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def nda_signed(self):
        """
        Gets the nda_signed of this InvestmentProject.

        :return: The nda_signed of this InvestmentProject.
        :rtype: bool
        """
        return self._nda_signed

    @nda_signed.setter
    def nda_signed(self, nda_signed):
        """
        Sets the nda_signed of this InvestmentProject.

        :param nda_signed: The nda_signed of this InvestmentProject.
        :type: bool
        """
        if nda_signed is None:
            raise ValueError("Invalid value for `nda_signed`, must not be `None`")

        self._nda_signed = nda_signed

    @property
    def non_fdi_type(self):
        """
        Gets the non_fdi_type of this InvestmentProject.

        :return: The non_fdi_type of this InvestmentProject.
        :rtype: NonFDIType
        """
        return self._non_fdi_type

    @non_fdi_type.setter
    def non_fdi_type(self, non_fdi_type):
        """
        Sets the non_fdi_type of this InvestmentProject.

        :param non_fdi_type: The non_fdi_type of this InvestmentProject.
        :type: NonFDIType
        """

        self._non_fdi_type = non_fdi_type

    @property
    def not_shareable_reason(self):
        """
        Gets the not_shareable_reason of this InvestmentProject.

        :return: The not_shareable_reason of this InvestmentProject.
        :rtype: str
        """
        return self._not_shareable_reason

    @not_shareable_reason.setter
    def not_shareable_reason(self, not_shareable_reason):
        """
        Sets the not_shareable_reason of this InvestmentProject.

        :param not_shareable_reason: The not_shareable_reason of this InvestmentProject.
        :type: str
        """

        self._not_shareable_reason = not_shareable_reason

    @property
    def operations_commenced_documents(self):
        """
        Gets the operations_commenced_documents of this InvestmentProject.

        :return: The operations_commenced_documents of this InvestmentProject.
        :rtype: Documents
        """
        return self._operations_commenced_documents

    @operations_commenced_documents.setter
    def operations_commenced_documents(self, operations_commenced_documents):
        """
        Sets the operations_commenced_documents of this InvestmentProject.

        :param operations_commenced_documents: The operations_commenced_documents of this InvestmentProject.
        :type: Documents
        """

        self._operations_commenced_documents = operations_commenced_documents

    @property
    def stage(self):
        """
        Gets the stage of this InvestmentProject.

        :return: The stage of this InvestmentProject.
        :rtype: Stage
        """
        return self._stage

    @stage.setter
    def stage(self, stage):
        """
        Sets the stage of this InvestmentProject.

        :param stage: The stage of this InvestmentProject.
        :type: Stage
        """

        self._stage = stage

    @property
    def project_code(self):
        """
        Gets the project_code of this InvestmentProject.

        :return: The project_code of this InvestmentProject.
        :rtype: str
        """
        return self._project_code

    @project_code.setter
    def project_code(self, project_code):
        """
        Sets the project_code of this InvestmentProject.

        :param project_code: The project_code of this InvestmentProject.
        :type: str
        """

        self._project_code = project_code

    @property
    def project_shareable(self):
        """
        Gets the project_shareable of this InvestmentProject.

        :return: The project_shareable of this InvestmentProject.
        :rtype: bool
        """
        return self._project_shareable

    @project_shareable.setter
    def project_shareable(self, project_shareable):
        """
        Sets the project_shareable of this InvestmentProject.

        :param project_shareable: The project_shareable of this InvestmentProject.
        :type: bool
        """

        self._project_shareable = project_shareable

    @property
    def referral_source_activity(self):
        """
        Gets the referral_source_activity of this InvestmentProject.

        :return: The referral_source_activity of this InvestmentProject.
        :rtype: ReferralSourceActivity
        """
        return self._referral_source_activity

    @referral_source_activity.setter
    def referral_source_activity(self, referral_source_activity):
        """
        Sets the referral_source_activity of this InvestmentProject.

        :param referral_source_activity: The referral_source_activity of this InvestmentProject.
        :type: ReferralSourceActivity
        """
        if referral_source_activity is None:
            raise ValueError("Invalid value for `referral_source_activity`, must not be `None`")

        self._referral_source_activity = referral_source_activity

    @property
    def referral_source_activity_marketing(self):
        """
        Gets the referral_source_activity_marketing of this InvestmentProject.

        :return: The referral_source_activity_marketing of this InvestmentProject.
        :rtype: ReferralSourceActivityMarketing
        """
        return self._referral_source_activity_marketing

    @referral_source_activity_marketing.setter
    def referral_source_activity_marketing(self, referral_source_activity_marketing):
        """
        Sets the referral_source_activity_marketing of this InvestmentProject.

        :param referral_source_activity_marketing: The referral_source_activity_marketing of this InvestmentProject.
        :type: ReferralSourceActivityMarketing
        """

        self._referral_source_activity_marketing = referral_source_activity_marketing

    @property
    def referral_source_activity_website(self):
        """
        Gets the referral_source_activity_website of this InvestmentProject.

        :return: The referral_source_activity_website of this InvestmentProject.
        :rtype: ReferralSourceActivityWebsite
        """
        return self._referral_source_activity_website

    @referral_source_activity_website.setter
    def referral_source_activity_website(self, referral_source_activity_website):
        """
        Sets the referral_source_activity_website of this InvestmentProject.

        :param referral_source_activity_website: The referral_source_activity_website of this InvestmentProject.
        :type: ReferralSourceActivityWebsite
        """

        self._referral_source_activity_website = referral_source_activity_website

    @property
    def referral_source_activity_event(self):
        """
        Gets the referral_source_activity_event of this InvestmentProject.

        :return: The referral_source_activity_event of this InvestmentProject.
        :rtype: str
        """
        return self._referral_source_activity_event

    @referral_source_activity_event.setter
    def referral_source_activity_event(self, referral_source_activity_event):
        """
        Sets the referral_source_activity_event of this InvestmentProject.

        :param referral_source_activity_event: The referral_source_activity_event of this InvestmentProject.
        :type: str
        """

        self._referral_source_activity_event = referral_source_activity_event

    @property
    def referral_source_advisor(self):
        """
        Gets the referral_source_advisor of this InvestmentProject.

        :return: The referral_source_advisor of this InvestmentProject.
        :rtype: Adviser
        """
        return self._referral_source_advisor

    @referral_source_advisor.setter
    def referral_source_advisor(self, referral_source_advisor):
        """
        Sets the referral_source_advisor of this InvestmentProject.

        :param referral_source_advisor: The referral_source_advisor of this InvestmentProject.
        :type: Adviser
        """

        self._referral_source_advisor = referral_source_advisor

    @property
    def sector(self):
        """
        Gets the sector of this InvestmentProject.

        :return: The sector of this InvestmentProject.
        :rtype: Sector
        """
        return self._sector

    @sector.setter
    def sector(self, sector):
        """
        Sets the sector of this InvestmentProject.

        :param sector: The sector of this InvestmentProject.
        :type: Sector
        """
        if sector is None:
            raise ValueError("Invalid value for `sector`, must not be `None`")

        self._sector = sector

    @property
    def value_complete(self):
        """
        Gets the value_complete of this InvestmentProject.
        Whether the value section is complete enough to move to the next project stage

        :return: The value_complete of this InvestmentProject.
        :rtype: bool
        """
        return self._value_complete

    @value_complete.setter
    def value_complete(self, value_complete):
        """
        Sets the value_complete of this InvestmentProject.
        Whether the value section is complete enough to move to the next project stage

        :param value_complete: The value_complete of this InvestmentProject.
        :type: bool
        """

        self._value_complete = value_complete

    @property
    def total_investment(self):
        """
        Gets the total_investment of this InvestmentProject.

        :return: The total_investment of this InvestmentProject.
        :rtype: int
        """
        return self._total_investment

    @total_investment.setter
    def total_investment(self, total_investment):
        """
        Sets the total_investment of this InvestmentProject.

        :param total_investment: The total_investment of this InvestmentProject.
        :type: int
        """

        self._total_investment = total_investment

    @property
    def likelihood_of_landing(self):
        """
        Gets the likelihood_of_landing of this InvestmentProject.

        :return: The likelihood_of_landing of this InvestmentProject.
        :rtype: int
        """
        return self._likelihood_of_landing

    @likelihood_of_landing.setter
    def likelihood_of_landing(self, likelihood_of_landing):
        """
        Sets the likelihood_of_landing of this InvestmentProject.

        :param likelihood_of_landing: The likelihood_of_landing of this InvestmentProject.
        :type: int
        """

        self._likelihood_of_landing = likelihood_of_landing

    @property
    def priority(self):
        """
        Gets the priority of this InvestmentProject.

        :return: The priority of this InvestmentProject.
        :rtype: str
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """
        Sets the priority of this InvestmentProject.

        :param priority: The priority of this InvestmentProject.
        :type: str
        """
        allowed_values = ["1_low", "2_medium", "3_high"]
        if priority not in allowed_values:
            raise ValueError(
                "Invalid value for `priority` ({0}), must be one of {1}"
                .format(priority, allowed_values)
            )

        self._priority = priority

    @property
    def total_investment_documents(self):
        """
        Gets the total_investment_documents of this InvestmentProject.

        :return: The total_investment_documents of this InvestmentProject.
        :rtype: Documents
        """
        return self._total_investment_documents

    @total_investment_documents.setter
    def total_investment_documents(self, total_investment_documents):
        """
        Sets the total_investment_documents of this InvestmentProject.

        :param total_investment_documents: The total_investment_documents of this InvestmentProject.
        :type: Documents
        """

        self._total_investment_documents = total_investment_documents

    @property
    def client_cannot_provide_total_investment(self):
        """
        Gets the client_cannot_provide_total_investment of this InvestmentProject.

        :return: The client_cannot_provide_total_investment of this InvestmentProject.
        :rtype: bool
        """
        return self._client_cannot_provide_total_investment

    @client_cannot_provide_total_investment.setter
    def client_cannot_provide_total_investment(self, client_cannot_provide_total_investment):
        """
        Sets the client_cannot_provide_total_investment of this InvestmentProject.

        :param client_cannot_provide_total_investment: The client_cannot_provide_total_investment of this InvestmentProject.
        :type: bool
        """

        self._client_cannot_provide_total_investment = client_cannot_provide_total_investment

    @property
    def foreign_equity_investment(self):
        """
        Gets the foreign_equity_investment of this InvestmentProject.

        :return: The foreign_equity_investment of this InvestmentProject.
        :rtype: int
        """
        return self._foreign_equity_investment

    @foreign_equity_investment.setter
    def foreign_equity_investment(self, foreign_equity_investment):
        """
        Sets the foreign_equity_investment of this InvestmentProject.

        :param foreign_equity_investment: The foreign_equity_investment of this InvestmentProject.
        :type: int
        """

        self._foreign_equity_investment = foreign_equity_investment

    @property
    def foreign_equity_investment_documents(self):
        """
        Gets the foreign_equity_investment_documents of this InvestmentProject.

        :return: The foreign_equity_investment_documents of this InvestmentProject.
        :rtype: Documents
        """
        return self._foreign_equity_investment_documents

    @foreign_equity_investment_documents.setter
    def foreign_equity_investment_documents(self, foreign_equity_investment_documents):
        """
        Sets the foreign_equity_investment_documents of this InvestmentProject.

        :param foreign_equity_investment_documents: The foreign_equity_investment_documents of this InvestmentProject.
        :type: Documents
        """

        self._foreign_equity_investment_documents = foreign_equity_investment_documents

    @property
    def client_cannot_provide_foreign_investment(self):
        """
        Gets the client_cannot_provide_foreign_investment of this InvestmentProject.

        :return: The client_cannot_provide_foreign_investment of this InvestmentProject.
        :rtype: bool
        """
        return self._client_cannot_provide_foreign_investment

    @client_cannot_provide_foreign_investment.setter
    def client_cannot_provide_foreign_investment(self, client_cannot_provide_foreign_investment):
        """
        Sets the client_cannot_provide_foreign_investment of this InvestmentProject.

        :param client_cannot_provide_foreign_investment: The client_cannot_provide_foreign_investment of this InvestmentProject.
        :type: bool
        """

        self._client_cannot_provide_foreign_investment = client_cannot_provide_foreign_investment

    @property
    def government_assistance(self):
        """
        Gets the government_assistance of this InvestmentProject.

        :return: The government_assistance of this InvestmentProject.
        :rtype: bool
        """
        return self._government_assistance

    @government_assistance.setter
    def government_assistance(self, government_assistance):
        """
        Sets the government_assistance of this InvestmentProject.

        :param government_assistance: The government_assistance of this InvestmentProject.
        :type: bool
        """

        self._government_assistance = government_assistance

    @property
    def number_new_jobs(self):
        """
        Gets the number_new_jobs of this InvestmentProject.

        :return: The number_new_jobs of this InvestmentProject.
        :rtype: int
        """
        return self._number_new_jobs

    @number_new_jobs.setter
    def number_new_jobs(self, number_new_jobs):
        """
        Sets the number_new_jobs of this InvestmentProject.

        :param number_new_jobs: The number_new_jobs of this InvestmentProject.
        :type: int
        """

        self._number_new_jobs = number_new_jobs

    @property
    def number_new_jobs_documents(self):
        """
        Gets the number_new_jobs_documents of this InvestmentProject.

        :return: The number_new_jobs_documents of this InvestmentProject.
        :rtype: Documents
        """
        return self._number_new_jobs_documents

    @number_new_jobs_documents.setter
    def number_new_jobs_documents(self, number_new_jobs_documents):
        """
        Sets the number_new_jobs_documents of this InvestmentProject.

        :param number_new_jobs_documents: The number_new_jobs_documents of this InvestmentProject.
        :type: Documents
        """

        self._number_new_jobs_documents = number_new_jobs_documents

    @property
    def number_safeguarded_jobs(self):
        """
        Gets the number_safeguarded_jobs of this InvestmentProject.

        :return: The number_safeguarded_jobs of this InvestmentProject.
        :rtype: int
        """
        return self._number_safeguarded_jobs

    @number_safeguarded_jobs.setter
    def number_safeguarded_jobs(self, number_safeguarded_jobs):
        """
        Sets the number_safeguarded_jobs of this InvestmentProject.

        :param number_safeguarded_jobs: The number_safeguarded_jobs of this InvestmentProject.
        :type: int
        """

        self._number_safeguarded_jobs = number_safeguarded_jobs

    @property
    def number_safeguarded_jobs_documents(self):
        """
        Gets the number_safeguarded_jobs_documents of this InvestmentProject.

        :return: The number_safeguarded_jobs_documents of this InvestmentProject.
        :rtype: Documents
        """
        return self._number_safeguarded_jobs_documents

    @number_safeguarded_jobs_documents.setter
    def number_safeguarded_jobs_documents(self, number_safeguarded_jobs_documents):
        """
        Sets the number_safeguarded_jobs_documents of this InvestmentProject.

        :param number_safeguarded_jobs_documents: The number_safeguarded_jobs_documents of this InvestmentProject.
        :type: Documents
        """

        self._number_safeguarded_jobs_documents = number_safeguarded_jobs_documents

    @property
    def r_and_d_budget(self):
        """
        Gets the r_and_d_budget of this InvestmentProject.

        :return: The r_and_d_budget of this InvestmentProject.
        :rtype: bool
        """
        return self._r_and_d_budget

    @r_and_d_budget.setter
    def r_and_d_budget(self, r_and_d_budget):
        """
        Sets the r_and_d_budget of this InvestmentProject.

        :param r_and_d_budget: The r_and_d_budget of this InvestmentProject.
        :type: bool
        """

        self._r_and_d_budget = r_and_d_budget

    @property
    def r_and_d_budget_documents(self):
        """
        Gets the r_and_d_budget_documents of this InvestmentProject.

        :return: The r_and_d_budget_documents of this InvestmentProject.
        :rtype: Documents
        """
        return self._r_and_d_budget_documents

    @r_and_d_budget_documents.setter
    def r_and_d_budget_documents(self, r_and_d_budget_documents):
        """
        Sets the r_and_d_budget_documents of this InvestmentProject.

        :param r_and_d_budget_documents: The r_and_d_budget_documents of this InvestmentProject.
        :type: Documents
        """

        self._r_and_d_budget_documents = r_and_d_budget_documents

    @property
    def non_fdi_r_and_d_budget(self):
        """
        Gets the non_fdi_r_and_d_budget of this InvestmentProject.

        :return: The non_fdi_r_and_d_budget of this InvestmentProject.
        :rtype: bool
        """
        return self._non_fdi_r_and_d_budget

    @non_fdi_r_and_d_budget.setter
    def non_fdi_r_and_d_budget(self, non_fdi_r_and_d_budget):
        """
        Sets the non_fdi_r_and_d_budget of this InvestmentProject.

        :param non_fdi_r_and_d_budget: The non_fdi_r_and_d_budget of this InvestmentProject.
        :type: bool
        """

        self._non_fdi_r_and_d_budget = non_fdi_r_and_d_budget

    @property
    def new_tech_to_uk(self):
        """
        Gets the new_tech_to_uk of this InvestmentProject.

        :return: The new_tech_to_uk of this InvestmentProject.
        :rtype: bool
        """
        return self._new_tech_to_uk

    @new_tech_to_uk.setter
    def new_tech_to_uk(self, new_tech_to_uk):
        """
        Sets the new_tech_to_uk of this InvestmentProject.

        :param new_tech_to_uk: The new_tech_to_uk of this InvestmentProject.
        :type: bool
        """

        self._new_tech_to_uk = new_tech_to_uk

    @property
    def new_tech_to_uk_documents(self):
        """
        Gets the new_tech_to_uk_documents of this InvestmentProject.

        :return: The new_tech_to_uk_documents of this InvestmentProject.
        :rtype: Documents
        """
        return self._new_tech_to_uk_documents

    @new_tech_to_uk_documents.setter
    def new_tech_to_uk_documents(self, new_tech_to_uk_documents):
        """
        Sets the new_tech_to_uk_documents of this InvestmentProject.

        :param new_tech_to_uk_documents: The new_tech_to_uk_documents of this InvestmentProject.
        :type: Documents
        """

        self._new_tech_to_uk_documents = new_tech_to_uk_documents

    @property
    def export_revenue(self):
        """
        Gets the export_revenue of this InvestmentProject.

        :return: The export_revenue of this InvestmentProject.
        :rtype: bool
        """
        return self._export_revenue

    @export_revenue.setter
    def export_revenue(self, export_revenue):
        """
        Sets the export_revenue of this InvestmentProject.

        :param export_revenue: The export_revenue of this InvestmentProject.
        :type: bool
        """

        self._export_revenue = export_revenue

    @property
    def export_revenue_documents(self):
        """
        Gets the export_revenue_documents of this InvestmentProject.

        :return: The export_revenue_documents of this InvestmentProject.
        :rtype: Documents
        """
        return self._export_revenue_documents

    @export_revenue_documents.setter
    def export_revenue_documents(self, export_revenue_documents):
        """
        Sets the export_revenue_documents of this InvestmentProject.

        :param export_revenue_documents: The export_revenue_documents of this InvestmentProject.
        :type: Documents
        """

        self._export_revenue_documents = export_revenue_documents

    @property
    def average_salary(self):
        """
        Gets the average_salary of this InvestmentProject.

        :return: The average_salary of this InvestmentProject.
        :rtype: InvestmentProjectAverageSalary
        """
        return self._average_salary

    @average_salary.setter
    def average_salary(self, average_salary):
        """
        Sets the average_salary of this InvestmentProject.

        :param average_salary: The average_salary of this InvestmentProject.
        :type: InvestmentProjectAverageSalary
        """

        self._average_salary = average_salary

    @property
    def average_salary_documents(self):
        """
        Gets the average_salary_documents of this InvestmentProject.

        :return: The average_salary_documents of this InvestmentProject.
        :rtype: Documents
        """
        return self._average_salary_documents

    @average_salary_documents.setter
    def average_salary_documents(self, average_salary_documents):
        """
        Sets the average_salary_documents of this InvestmentProject.

        :param average_salary_documents: The average_salary_documents of this InvestmentProject.
        :type: Documents
        """

        self._average_salary_documents = average_salary_documents

    @property
    def requirements_complete(self):
        """
        Gets the requirements_complete of this InvestmentProject.
        Whether the requirements section is complete enough to move to the next project stage

        :return: The requirements_complete of this InvestmentProject.
        :rtype: bool
        """
        return self._requirements_complete

    @requirements_complete.setter
    def requirements_complete(self, requirements_complete):
        """
        Sets the requirements_complete of this InvestmentProject.
        Whether the requirements section is complete enough to move to the next project stage

        :param requirements_complete: The requirements_complete of this InvestmentProject.
        :type: bool
        """

        self._requirements_complete = requirements_complete

    @property
    def client_requirements(self):
        """
        Gets the client_requirements of this InvestmentProject.

        :return: The client_requirements of this InvestmentProject.
        :rtype: str
        """
        return self._client_requirements

    @client_requirements.setter
    def client_requirements(self, client_requirements):
        """
        Sets the client_requirements of this InvestmentProject.

        :param client_requirements: The client_requirements of this InvestmentProject.
        :type: str
        """

        self._client_requirements = client_requirements

    @property
    def site_decided(self):
        """
        Gets the site_decided of this InvestmentProject.

        :return: The site_decided of this InvestmentProject.
        :rtype: bool
        """
        return self._site_decided

    @site_decided.setter
    def site_decided(self, site_decided):
        """
        Sets the site_decided of this InvestmentProject.

        :param site_decided: The site_decided of this InvestmentProject.
        :type: bool
        """

        self._site_decided = site_decided

    @property
    def address_line_1(self):
        """
        Gets the address_line_1 of this InvestmentProject.

        :return: The address_line_1 of this InvestmentProject.
        :rtype: str
        """
        return self._address_line_1

    @address_line_1.setter
    def address_line_1(self, address_line_1):
        """
        Sets the address_line_1 of this InvestmentProject.

        :param address_line_1: The address_line_1 of this InvestmentProject.
        :type: str
        """

        self._address_line_1 = address_line_1

    @property
    def address_line_2(self):
        """
        Gets the address_line_2 of this InvestmentProject.

        :return: The address_line_2 of this InvestmentProject.
        :rtype: str
        """
        return self._address_line_2

    @address_line_2.setter
    def address_line_2(self, address_line_2):
        """
        Sets the address_line_2 of this InvestmentProject.

        :param address_line_2: The address_line_2 of this InvestmentProject.
        :type: str
        """

        self._address_line_2 = address_line_2

    @property
    def address_line_3(self):
        """
        Gets the address_line_3 of this InvestmentProject.

        :return: The address_line_3 of this InvestmentProject.
        :rtype: str
        """
        return self._address_line_3

    @address_line_3.setter
    def address_line_3(self, address_line_3):
        """
        Sets the address_line_3 of this InvestmentProject.

        :param address_line_3: The address_line_3 of this InvestmentProject.
        :type: str
        """

        self._address_line_3 = address_line_3

    @property
    def client_considering_other_countries(self):
        """
        Gets the client_considering_other_countries of this InvestmentProject.

        :return: The client_considering_other_countries of this InvestmentProject.
        :rtype: bool
        """
        return self._client_considering_other_countries

    @client_considering_other_countries.setter
    def client_considering_other_countries(self, client_considering_other_countries):
        """
        Sets the client_considering_other_countries of this InvestmentProject.

        :param client_considering_other_countries: The client_considering_other_countries of this InvestmentProject.
        :type: bool
        """

        self._client_considering_other_countries = client_considering_other_countries

    @property
    def competitor_countries(self):
        """
        Gets the competitor_countries of this InvestmentProject.

        :return: The competitor_countries of this InvestmentProject.
        :rtype: CountryArray
        """
        return self._competitor_countries

    @competitor_countries.setter
    def competitor_countries(self, competitor_countries):
        """
        Sets the competitor_countries of this InvestmentProject.

        :param competitor_countries: The competitor_countries of this InvestmentProject.
        :type: CountryArray
        """

        self._competitor_countries = competitor_countries

    @property
    def uk_region_locations(self):
        """
        Gets the uk_region_locations of this InvestmentProject.

        :return: The uk_region_locations of this InvestmentProject.
        :rtype: UKRegions
        """
        return self._uk_region_locations

    @uk_region_locations.setter
    def uk_region_locations(self, uk_region_locations):
        """
        Sets the uk_region_locations of this InvestmentProject.

        :param uk_region_locations: The uk_region_locations of this InvestmentProject.
        :type: UKRegions
        """

        self._uk_region_locations = uk_region_locations

    @property
    def strategic_drivers(self):
        """
        Gets the strategic_drivers of this InvestmentProject.

        :return: The strategic_drivers of this InvestmentProject.
        :rtype: StrategicDriverArray
        """
        return self._strategic_drivers

    @strategic_drivers.setter
    def strategic_drivers(self, strategic_drivers):
        """
        Sets the strategic_drivers of this InvestmentProject.

        :param strategic_drivers: The strategic_drivers of this InvestmentProject.
        :type: StrategicDriverArray
        """

        self._strategic_drivers = strategic_drivers

    @property
    def uk_company(self):
        """
        Gets the uk_company of this InvestmentProject.

        :return: The uk_company of this InvestmentProject.
        :rtype: CompanySlim
        """
        return self._uk_company

    @uk_company.setter
    def uk_company(self, uk_company):
        """
        Sets the uk_company of this InvestmentProject.

        :param uk_company: The uk_company of this InvestmentProject.
        :type: CompanySlim
        """

        self._uk_company = uk_company

    @property
    def address_postcode(self):
        """
        Gets the address_postcode of this InvestmentProject.

        :return: The address_postcode of this InvestmentProject.
        :rtype: str
        """
        return self._address_postcode

    @address_postcode.setter
    def address_postcode(self, address_postcode):
        """
        Sets the address_postcode of this InvestmentProject.

        :param address_postcode: The address_postcode of this InvestmentProject.
        :type: str
        """

        self._address_postcode = address_postcode

    @property
    def team_members(self):
        """
        Gets the team_members of this InvestmentProject.
        Additional team members assigned to this project. Read-only in this endpoint.

        :return: The team_members of this InvestmentProject.
        :rtype: InvestmentTeamMemberArray
        """
        return self._team_members

    @team_members.setter
    def team_members(self, team_members):
        """
        Sets the team_members of this InvestmentProject.
        Additional team members assigned to this project. Read-only in this endpoint.

        :param team_members: The team_members of this InvestmentProject.
        :type: InvestmentTeamMemberArray
        """

        self._team_members = team_members

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, InvestmentProject):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
