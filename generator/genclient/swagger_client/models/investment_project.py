# coding: utf-8

"""
    Data Hub API

    Data Hub API

    OpenAPI spec version: 1.0.0
    Contact: jim.smith@digital.trade.gov.uk
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class InvestmentProject(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, anonymous_description=None, business_activities=None, client_contacts=None, client_relationship_manager=None, description=None, estimated_land_date=None, fdi_type=None, id=None, intermediate_company=None, investor_company=None, investment_type=None, name=None, nda_signed=None, non_fdi_type=None, not_shareable_reason=None, phase=None, project_code=None, project_shareable=None, referral_source_activity=None, referral_source_activity_marketing=None, referral_source_activity_website=None, referral_source_activity_event=None, referral_source_advisor=None, sector=None):
        """
        InvestmentProject - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'anonymous_description': 'str',
            'business_activities': 'BusinessActivities',
            'client_contacts': 'ContactArray',
            'client_relationship_manager': 'Advisor',
            'description': 'str',
            'estimated_land_date': 'date',
            'fdi_type': 'FDIType',
            'id': 'str',
            'intermediate_company': 'CompanySlim',
            'investor_company': 'CompanySlim',
            'investment_type': 'InvestmentType',
            'name': 'str',
            'nda_signed': 'bool',
            'non_fdi_type': 'NonFDIType',
            'not_shareable_reason': 'str',
            'phase': 'Phase',
            'project_code': 'str',
            'project_shareable': 'bool',
            'referral_source_activity': 'ReferralSourceActivity',
            'referral_source_activity_marketing': 'ReferralSourceActivityMarketing',
            'referral_source_activity_website': 'ReferralSourceActivityWebsite',
            'referral_source_activity_event': 'str',
            'referral_source_advisor': 'Advisor',
            'sector': 'Sector'
        }

        self.attribute_map = {
            'anonymous_description': 'anonymous_description',
            'business_activities': 'business_activities',
            'client_contacts': 'client_contacts',
            'client_relationship_manager': 'client_relationship_manager',
            'description': 'description',
            'estimated_land_date': 'estimated_land_date',
            'fdi_type': 'fdi_type',
            'id': 'id',
            'intermediate_company': 'intermediate_company',
            'investor_company': 'investor_company',
            'investment_type': 'investment_type',
            'name': 'name',
            'nda_signed': 'nda_signed',
            'non_fdi_type': 'non_fdi_type',
            'not_shareable_reason': 'not_shareable_reason',
            'phase': 'phase',
            'project_code': 'project_code',
            'project_shareable': 'project_shareable',
            'referral_source_activity': 'referral_source_activity',
            'referral_source_activity_marketing': 'referral_source_activity_marketing',
            'referral_source_activity_website': 'referral_source_activity_website',
            'referral_source_activity_event': 'referral_source_activity_event',
            'referral_source_advisor': 'referral_source_advisor',
            'sector': 'sector'
        }

        self._anonymous_description = anonymous_description
        self._business_activities = business_activities
        self._client_contacts = client_contacts
        self._client_relationship_manager = client_relationship_manager
        self._description = description
        self._estimated_land_date = estimated_land_date
        self._fdi_type = fdi_type
        self._id = id
        self._intermediate_company = intermediate_company
        self._investor_company = investor_company
        self._investment_type = investment_type
        self._name = name
        self._nda_signed = nda_signed
        self._non_fdi_type = non_fdi_type
        self._not_shareable_reason = not_shareable_reason
        self._phase = phase
        self._project_code = project_code
        self._project_shareable = project_shareable
        self._referral_source_activity = referral_source_activity
        self._referral_source_activity_marketing = referral_source_activity_marketing
        self._referral_source_activity_website = referral_source_activity_website
        self._referral_source_activity_event = referral_source_activity_event
        self._referral_source_advisor = referral_source_advisor
        self._sector = sector

    @property
    def anonymous_description(self):
        """
        Gets the anonymous_description of this InvestmentProject.

        :return: The anonymous_description of this InvestmentProject.
        :rtype: str
        """
        return self._anonymous_description

    @anonymous_description.setter
    def anonymous_description(self, anonymous_description):
        """
        Sets the anonymous_description of this InvestmentProject.

        :param anonymous_description: The anonymous_description of this InvestmentProject.
        :type: str
        """

        self._anonymous_description = anonymous_description

    @property
    def business_activities(self):
        """
        Gets the business_activities of this InvestmentProject.

        :return: The business_activities of this InvestmentProject.
        :rtype: BusinessActivities
        """
        return self._business_activities

    @business_activities.setter
    def business_activities(self, business_activities):
        """
        Sets the business_activities of this InvestmentProject.

        :param business_activities: The business_activities of this InvestmentProject.
        :type: BusinessActivities
        """
        if business_activities is None:
            raise ValueError("Invalid value for `business_activities`, must not be `None`")

        self._business_activities = business_activities

    @property
    def client_contacts(self):
        """
        Gets the client_contacts of this InvestmentProject.

        :return: The client_contacts of this InvestmentProject.
        :rtype: ContactArray
        """
        return self._client_contacts

    @client_contacts.setter
    def client_contacts(self, client_contacts):
        """
        Sets the client_contacts of this InvestmentProject.

        :param client_contacts: The client_contacts of this InvestmentProject.
        :type: ContactArray
        """
        if client_contacts is None:
            raise ValueError("Invalid value for `client_contacts`, must not be `None`")

        self._client_contacts = client_contacts

    @property
    def client_relationship_manager(self):
        """
        Gets the client_relationship_manager of this InvestmentProject.

        :return: The client_relationship_manager of this InvestmentProject.
        :rtype: Advisor
        """
        return self._client_relationship_manager

    @client_relationship_manager.setter
    def client_relationship_manager(self, client_relationship_manager):
        """
        Sets the client_relationship_manager of this InvestmentProject.

        :param client_relationship_manager: The client_relationship_manager of this InvestmentProject.
        :type: Advisor
        """
        if client_relationship_manager is None:
            raise ValueError("Invalid value for `client_relationship_manager`, must not be `None`")

        self._client_relationship_manager = client_relationship_manager

    @property
    def description(self):
        """
        Gets the description of this InvestmentProject.

        :return: The description of this InvestmentProject.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this InvestmentProject.

        :param description: The description of this InvestmentProject.
        :type: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")

        self._description = description

    @property
    def estimated_land_date(self):
        """
        Gets the estimated_land_date of this InvestmentProject.

        :return: The estimated_land_date of this InvestmentProject.
        :rtype: date
        """
        return self._estimated_land_date

    @estimated_land_date.setter
    def estimated_land_date(self, estimated_land_date):
        """
        Sets the estimated_land_date of this InvestmentProject.

        :param estimated_land_date: The estimated_land_date of this InvestmentProject.
        :type: date
        """
        if estimated_land_date is None:
            raise ValueError("Invalid value for `estimated_land_date`, must not be `None`")

        self._estimated_land_date = estimated_land_date

    @property
    def fdi_type(self):
        """
        Gets the fdi_type of this InvestmentProject.

        :return: The fdi_type of this InvestmentProject.
        :rtype: FDIType
        """
        return self._fdi_type

    @fdi_type.setter
    def fdi_type(self, fdi_type):
        """
        Sets the fdi_type of this InvestmentProject.

        :param fdi_type: The fdi_type of this InvestmentProject.
        :type: FDIType
        """

        self._fdi_type = fdi_type

    @property
    def id(self):
        """
        Gets the id of this InvestmentProject.

        :return: The id of this InvestmentProject.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this InvestmentProject.

        :param id: The id of this InvestmentProject.
        :type: str
        """

        self._id = id

    @property
    def intermediate_company(self):
        """
        Gets the intermediate_company of this InvestmentProject.

        :return: The intermediate_company of this InvestmentProject.
        :rtype: CompanySlim
        """
        return self._intermediate_company

    @intermediate_company.setter
    def intermediate_company(self, intermediate_company):
        """
        Sets the intermediate_company of this InvestmentProject.

        :param intermediate_company: The intermediate_company of this InvestmentProject.
        :type: CompanySlim
        """

        self._intermediate_company = intermediate_company

    @property
    def investor_company(self):
        """
        Gets the investor_company of this InvestmentProject.

        :return: The investor_company of this InvestmentProject.
        :rtype: CompanySlim
        """
        return self._investor_company

    @investor_company.setter
    def investor_company(self, investor_company):
        """
        Sets the investor_company of this InvestmentProject.

        :param investor_company: The investor_company of this InvestmentProject.
        :type: CompanySlim
        """
        if investor_company is None:
            raise ValueError("Invalid value for `investor_company`, must not be `None`")

        self._investor_company = investor_company

    @property
    def investment_type(self):
        """
        Gets the investment_type of this InvestmentProject.

        :return: The investment_type of this InvestmentProject.
        :rtype: InvestmentType
        """
        return self._investment_type

    @investment_type.setter
    def investment_type(self, investment_type):
        """
        Sets the investment_type of this InvestmentProject.

        :param investment_type: The investment_type of this InvestmentProject.
        :type: InvestmentType
        """
        if investment_type is None:
            raise ValueError("Invalid value for `investment_type`, must not be `None`")

        self._investment_type = investment_type

    @property
    def name(self):
        """
        Gets the name of this InvestmentProject.

        :return: The name of this InvestmentProject.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this InvestmentProject.

        :param name: The name of this InvestmentProject.
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def nda_signed(self):
        """
        Gets the nda_signed of this InvestmentProject.

        :return: The nda_signed of this InvestmentProject.
        :rtype: bool
        """
        return self._nda_signed

    @nda_signed.setter
    def nda_signed(self, nda_signed):
        """
        Sets the nda_signed of this InvestmentProject.

        :param nda_signed: The nda_signed of this InvestmentProject.
        :type: bool
        """
        if nda_signed is None:
            raise ValueError("Invalid value for `nda_signed`, must not be `None`")

        self._nda_signed = nda_signed

    @property
    def non_fdi_type(self):
        """
        Gets the non_fdi_type of this InvestmentProject.

        :return: The non_fdi_type of this InvestmentProject.
        :rtype: NonFDIType
        """
        return self._non_fdi_type

    @non_fdi_type.setter
    def non_fdi_type(self, non_fdi_type):
        """
        Sets the non_fdi_type of this InvestmentProject.

        :param non_fdi_type: The non_fdi_type of this InvestmentProject.
        :type: NonFDIType
        """

        self._non_fdi_type = non_fdi_type

    @property
    def not_shareable_reason(self):
        """
        Gets the not_shareable_reason of this InvestmentProject.

        :return: The not_shareable_reason of this InvestmentProject.
        :rtype: str
        """
        return self._not_shareable_reason

    @not_shareable_reason.setter
    def not_shareable_reason(self, not_shareable_reason):
        """
        Sets the not_shareable_reason of this InvestmentProject.

        :param not_shareable_reason: The not_shareable_reason of this InvestmentProject.
        :type: str
        """

        self._not_shareable_reason = not_shareable_reason

    @property
    def phase(self):
        """
        Gets the phase of this InvestmentProject.

        :return: The phase of this InvestmentProject.
        :rtype: Phase
        """
        return self._phase

    @phase.setter
    def phase(self, phase):
        """
        Sets the phase of this InvestmentProject.

        :param phase: The phase of this InvestmentProject.
        :type: Phase
        """

        self._phase = phase

    @property
    def project_code(self):
        """
        Gets the project_code of this InvestmentProject.

        :return: The project_code of this InvestmentProject.
        :rtype: str
        """
        return self._project_code

    @project_code.setter
    def project_code(self, project_code):
        """
        Sets the project_code of this InvestmentProject.

        :param project_code: The project_code of this InvestmentProject.
        :type: str
        """

        self._project_code = project_code

    @property
    def project_shareable(self):
        """
        Gets the project_shareable of this InvestmentProject.

        :return: The project_shareable of this InvestmentProject.
        :rtype: bool
        """
        return self._project_shareable

    @project_shareable.setter
    def project_shareable(self, project_shareable):
        """
        Sets the project_shareable of this InvestmentProject.

        :param project_shareable: The project_shareable of this InvestmentProject.
        :type: bool
        """

        self._project_shareable = project_shareable

    @property
    def referral_source_activity(self):
        """
        Gets the referral_source_activity of this InvestmentProject.

        :return: The referral_source_activity of this InvestmentProject.
        :rtype: ReferralSourceActivity
        """
        return self._referral_source_activity

    @referral_source_activity.setter
    def referral_source_activity(self, referral_source_activity):
        """
        Sets the referral_source_activity of this InvestmentProject.

        :param referral_source_activity: The referral_source_activity of this InvestmentProject.
        :type: ReferralSourceActivity
        """
        if referral_source_activity is None:
            raise ValueError("Invalid value for `referral_source_activity`, must not be `None`")

        self._referral_source_activity = referral_source_activity

    @property
    def referral_source_activity_marketing(self):
        """
        Gets the referral_source_activity_marketing of this InvestmentProject.

        :return: The referral_source_activity_marketing of this InvestmentProject.
        :rtype: ReferralSourceActivityMarketing
        """
        return self._referral_source_activity_marketing

    @referral_source_activity_marketing.setter
    def referral_source_activity_marketing(self, referral_source_activity_marketing):
        """
        Sets the referral_source_activity_marketing of this InvestmentProject.

        :param referral_source_activity_marketing: The referral_source_activity_marketing of this InvestmentProject.
        :type: ReferralSourceActivityMarketing
        """

        self._referral_source_activity_marketing = referral_source_activity_marketing

    @property
    def referral_source_activity_website(self):
        """
        Gets the referral_source_activity_website of this InvestmentProject.

        :return: The referral_source_activity_website of this InvestmentProject.
        :rtype: ReferralSourceActivityWebsite
        """
        return self._referral_source_activity_website

    @referral_source_activity_website.setter
    def referral_source_activity_website(self, referral_source_activity_website):
        """
        Sets the referral_source_activity_website of this InvestmentProject.

        :param referral_source_activity_website: The referral_source_activity_website of this InvestmentProject.
        :type: ReferralSourceActivityWebsite
        """

        self._referral_source_activity_website = referral_source_activity_website

    @property
    def referral_source_activity_event(self):
        """
        Gets the referral_source_activity_event of this InvestmentProject.

        :return: The referral_source_activity_event of this InvestmentProject.
        :rtype: str
        """
        return self._referral_source_activity_event

    @referral_source_activity_event.setter
    def referral_source_activity_event(self, referral_source_activity_event):
        """
        Sets the referral_source_activity_event of this InvestmentProject.

        :param referral_source_activity_event: The referral_source_activity_event of this InvestmentProject.
        :type: str
        """

        self._referral_source_activity_event = referral_source_activity_event

    @property
    def referral_source_advisor(self):
        """
        Gets the referral_source_advisor of this InvestmentProject.

        :return: The referral_source_advisor of this InvestmentProject.
        :rtype: Advisor
        """
        return self._referral_source_advisor

    @referral_source_advisor.setter
    def referral_source_advisor(self, referral_source_advisor):
        """
        Sets the referral_source_advisor of this InvestmentProject.

        :param referral_source_advisor: The referral_source_advisor of this InvestmentProject.
        :type: Advisor
        """
        if referral_source_advisor is None:
            raise ValueError("Invalid value for `referral_source_advisor`, must not be `None`")

        self._referral_source_advisor = referral_source_advisor

    @property
    def sector(self):
        """
        Gets the sector of this InvestmentProject.

        :return: The sector of this InvestmentProject.
        :rtype: Sector
        """
        return self._sector

    @sector.setter
    def sector(self, sector):
        """
        Sets the sector of this InvestmentProject.

        :param sector: The sector of this InvestmentProject.
        :type: Sector
        """
        if sector is None:
            raise ValueError("Invalid value for `sector`, must not be `None`")

        self._sector = sector

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, InvestmentProject):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
