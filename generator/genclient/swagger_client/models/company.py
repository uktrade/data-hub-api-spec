# coding: utf-8

"""
    Data Hub API

    Data Hub API

    OpenAPI spec version: 1.0.0
    Contact: jim.smith@digital.trade.gov.uk
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Company(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, id=None, name=None, trading_name=None, uk_based=None, registered_address_1=None, registered_address_2=None, registered_address_town=None, registered_address_county=None, registered_address_postcode=None, created_on=None, modified_on=None, archived=None, archived_on=None, archived_reason=None, description=None, website=None, trading_address_1=None, trading_address_2=None, trading_address_town=None, trading_address_county=None, trading_address_postcode=None, account_manager=None, archived_by=None, business_type=None, children=None, classification=None, companies_house_data=None, contacts=None, employee_range=None, export_to_countries=None, future_interest_countries=None, headquarter_type=None, one_list_account_owner=None, parent=None, registered_address_country=None, sector=None, trading_address_country=None, turnover_range=None, uk_region=None, investment_projects_invested_in=None, investment_projects_invested_in_count=None):
        """
        Company - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'str',
            'name': 'str',
            'trading_name': 'str',
            'uk_based': 'bool',
            'registered_address_1': 'str',
            'registered_address_2': 'str',
            'registered_address_town': 'str',
            'registered_address_county': 'str',
            'registered_address_postcode': 'str',
            'created_on': 'datetime',
            'modified_on': 'datetime',
            'archived': 'bool',
            'archived_on': 'datetime',
            'archived_reason': 'str',
            'description': 'str',
            'website': 'str',
            'trading_address_1': 'str',
            'trading_address_2': 'str',
            'trading_address_town': 'str',
            'trading_address_county': 'str',
            'trading_address_postcode': 'str',
            'account_manager': 'Adviser',
            'archived_by': 'Adviser',
            'business_type': 'BusinessType',
            'children': 'CompanyKeyArray',
            'classification': 'Classification',
            'companies_house_data': 'CompaniesHouseCompany',
            'contacts': 'ContactArray',
            'employee_range': 'EmployeeRange',
            'export_to_countries': 'CountryArray',
            'future_interest_countries': 'CountryArray',
            'headquarter_type': 'HeadquarterType',
            'one_list_account_owner': 'Adviser',
            'parent': 'CompanySlim',
            'registered_address_country': 'Country',
            'sector': 'Sector',
            'trading_address_country': 'Country',
            'turnover_range': 'TurnoverRange',
            'uk_region': 'UKRegion',
            'investment_projects_invested_in': 'InvestmentProjectsList',
            'investment_projects_invested_in_count': 'int'
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'trading_name': 'trading_name',
            'uk_based': 'uk_based',
            'registered_address_1': 'registered_address_1',
            'registered_address_2': 'registered_address_2',
            'registered_address_town': 'registered_address_town',
            'registered_address_county': 'registered_address_county',
            'registered_address_postcode': 'registered_address_postcode',
            'created_on': 'created_on',
            'modified_on': 'modified_on',
            'archived': 'archived',
            'archived_on': 'archived_on',
            'archived_reason': 'archived_reason',
            'description': 'description',
            'website': 'website',
            'trading_address_1': 'trading_address_1',
            'trading_address_2': 'trading_address_2',
            'trading_address_town': 'trading_address_town',
            'trading_address_county': 'trading_address_county',
            'trading_address_postcode': 'trading_address_postcode',
            'account_manager': 'account_manager',
            'archived_by': 'archived_by',
            'business_type': 'business_type',
            'children': 'children',
            'classification': 'classification',
            'companies_house_data': 'companies_house_data',
            'contacts': 'contacts',
            'employee_range': 'employee_range',
            'export_to_countries': 'export_to_countries',
            'future_interest_countries': 'future_interest_countries',
            'headquarter_type': 'headquarter_type',
            'one_list_account_owner': 'one_list_account_owner',
            'parent': 'parent',
            'registered_address_country': 'registered_address_country',
            'sector': 'sector',
            'trading_address_country': 'trading_address_country',
            'turnover_range': 'turnover_range',
            'uk_region': 'uk_region',
            'investment_projects_invested_in': 'investment_projects_invested_in',
            'investment_projects_invested_in_count': 'investment_projects_invested_in_count'
        }

        self._id = id
        self._name = name
        self._trading_name = trading_name
        self._uk_based = uk_based
        self._registered_address_1 = registered_address_1
        self._registered_address_2 = registered_address_2
        self._registered_address_town = registered_address_town
        self._registered_address_county = registered_address_county
        self._registered_address_postcode = registered_address_postcode
        self._created_on = created_on
        self._modified_on = modified_on
        self._archived = archived
        self._archived_on = archived_on
        self._archived_reason = archived_reason
        self._description = description
        self._website = website
        self._trading_address_1 = trading_address_1
        self._trading_address_2 = trading_address_2
        self._trading_address_town = trading_address_town
        self._trading_address_county = trading_address_county
        self._trading_address_postcode = trading_address_postcode
        self._account_manager = account_manager
        self._archived_by = archived_by
        self._business_type = business_type
        self._children = children
        self._classification = classification
        self._companies_house_data = companies_house_data
        self._contacts = contacts
        self._employee_range = employee_range
        self._export_to_countries = export_to_countries
        self._future_interest_countries = future_interest_countries
        self._headquarter_type = headquarter_type
        self._one_list_account_owner = one_list_account_owner
        self._parent = parent
        self._registered_address_country = registered_address_country
        self._sector = sector
        self._trading_address_country = trading_address_country
        self._turnover_range = turnover_range
        self._uk_region = uk_region
        self._investment_projects_invested_in = investment_projects_invested_in
        self._investment_projects_invested_in_count = investment_projects_invested_in_count

    @property
    def id(self):
        """
        Gets the id of this Company.

        :return: The id of this Company.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Company.

        :param id: The id of this Company.
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """
        Gets the name of this Company.

        :return: The name of this Company.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this Company.

        :param name: The name of this Company.
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def trading_name(self):
        """
        Gets the trading_name of this Company.

        :return: The trading_name of this Company.
        :rtype: str
        """
        return self._trading_name

    @trading_name.setter
    def trading_name(self, trading_name):
        """
        Sets the trading_name of this Company.

        :param trading_name: The trading_name of this Company.
        :type: str
        """

        self._trading_name = trading_name

    @property
    def uk_based(self):
        """
        Gets the uk_based of this Company.

        :return: The uk_based of this Company.
        :rtype: bool
        """
        return self._uk_based

    @uk_based.setter
    def uk_based(self, uk_based):
        """
        Sets the uk_based of this Company.

        :param uk_based: The uk_based of this Company.
        :type: bool
        """

        self._uk_based = uk_based

    @property
    def registered_address_1(self):
        """
        Gets the registered_address_1 of this Company.

        :return: The registered_address_1 of this Company.
        :rtype: str
        """
        return self._registered_address_1

    @registered_address_1.setter
    def registered_address_1(self, registered_address_1):
        """
        Sets the registered_address_1 of this Company.

        :param registered_address_1: The registered_address_1 of this Company.
        :type: str
        """
        if registered_address_1 is None:
            raise ValueError("Invalid value for `registered_address_1`, must not be `None`")

        self._registered_address_1 = registered_address_1

    @property
    def registered_address_2(self):
        """
        Gets the registered_address_2 of this Company.

        :return: The registered_address_2 of this Company.
        :rtype: str
        """
        return self._registered_address_2

    @registered_address_2.setter
    def registered_address_2(self, registered_address_2):
        """
        Sets the registered_address_2 of this Company.

        :param registered_address_2: The registered_address_2 of this Company.
        :type: str
        """

        self._registered_address_2 = registered_address_2

    @property
    def registered_address_town(self):
        """
        Gets the registered_address_town of this Company.

        :return: The registered_address_town of this Company.
        :rtype: str
        """
        return self._registered_address_town

    @registered_address_town.setter
    def registered_address_town(self, registered_address_town):
        """
        Sets the registered_address_town of this Company.

        :param registered_address_town: The registered_address_town of this Company.
        :type: str
        """
        if registered_address_town is None:
            raise ValueError("Invalid value for `registered_address_town`, must not be `None`")

        self._registered_address_town = registered_address_town

    @property
    def registered_address_county(self):
        """
        Gets the registered_address_county of this Company.

        :return: The registered_address_county of this Company.
        :rtype: str
        """
        return self._registered_address_county

    @registered_address_county.setter
    def registered_address_county(self, registered_address_county):
        """
        Sets the registered_address_county of this Company.

        :param registered_address_county: The registered_address_county of this Company.
        :type: str
        """

        self._registered_address_county = registered_address_county

    @property
    def registered_address_postcode(self):
        """
        Gets the registered_address_postcode of this Company.

        :return: The registered_address_postcode of this Company.
        :rtype: str
        """
        return self._registered_address_postcode

    @registered_address_postcode.setter
    def registered_address_postcode(self, registered_address_postcode):
        """
        Sets the registered_address_postcode of this Company.

        :param registered_address_postcode: The registered_address_postcode of this Company.
        :type: str
        """

        self._registered_address_postcode = registered_address_postcode

    @property
    def created_on(self):
        """
        Gets the created_on of this Company.

        :return: The created_on of this Company.
        :rtype: datetime
        """
        return self._created_on

    @created_on.setter
    def created_on(self, created_on):
        """
        Sets the created_on of this Company.

        :param created_on: The created_on of this Company.
        :type: datetime
        """

        self._created_on = created_on

    @property
    def modified_on(self):
        """
        Gets the modified_on of this Company.

        :return: The modified_on of this Company.
        :rtype: datetime
        """
        return self._modified_on

    @modified_on.setter
    def modified_on(self, modified_on):
        """
        Sets the modified_on of this Company.

        :param modified_on: The modified_on of this Company.
        :type: datetime
        """

        self._modified_on = modified_on

    @property
    def archived(self):
        """
        Gets the archived of this Company.

        :return: The archived of this Company.
        :rtype: bool
        """
        return self._archived

    @archived.setter
    def archived(self, archived):
        """
        Sets the archived of this Company.

        :param archived: The archived of this Company.
        :type: bool
        """

        self._archived = archived

    @property
    def archived_on(self):
        """
        Gets the archived_on of this Company.

        :return: The archived_on of this Company.
        :rtype: datetime
        """
        return self._archived_on

    @archived_on.setter
    def archived_on(self, archived_on):
        """
        Sets the archived_on of this Company.

        :param archived_on: The archived_on of this Company.
        :type: datetime
        """

        self._archived_on = archived_on

    @property
    def archived_reason(self):
        """
        Gets the archived_reason of this Company.

        :return: The archived_reason of this Company.
        :rtype: str
        """
        return self._archived_reason

    @archived_reason.setter
    def archived_reason(self, archived_reason):
        """
        Sets the archived_reason of this Company.

        :param archived_reason: The archived_reason of this Company.
        :type: str
        """

        self._archived_reason = archived_reason

    @property
    def description(self):
        """
        Gets the description of this Company.

        :return: The description of this Company.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this Company.

        :param description: The description of this Company.
        :type: str
        """

        self._description = description

    @property
    def website(self):
        """
        Gets the website of this Company.

        :return: The website of this Company.
        :rtype: str
        """
        return self._website

    @website.setter
    def website(self, website):
        """
        Sets the website of this Company.

        :param website: The website of this Company.
        :type: str
        """

        self._website = website

    @property
    def trading_address_1(self):
        """
        Gets the trading_address_1 of this Company.

        :return: The trading_address_1 of this Company.
        :rtype: str
        """
        return self._trading_address_1

    @trading_address_1.setter
    def trading_address_1(self, trading_address_1):
        """
        Sets the trading_address_1 of this Company.

        :param trading_address_1: The trading_address_1 of this Company.
        :type: str
        """

        self._trading_address_1 = trading_address_1

    @property
    def trading_address_2(self):
        """
        Gets the trading_address_2 of this Company.

        :return: The trading_address_2 of this Company.
        :rtype: str
        """
        return self._trading_address_2

    @trading_address_2.setter
    def trading_address_2(self, trading_address_2):
        """
        Sets the trading_address_2 of this Company.

        :param trading_address_2: The trading_address_2 of this Company.
        :type: str
        """

        self._trading_address_2 = trading_address_2

    @property
    def trading_address_town(self):
        """
        Gets the trading_address_town of this Company.

        :return: The trading_address_town of this Company.
        :rtype: str
        """
        return self._trading_address_town

    @trading_address_town.setter
    def trading_address_town(self, trading_address_town):
        """
        Sets the trading_address_town of this Company.

        :param trading_address_town: The trading_address_town of this Company.
        :type: str
        """

        self._trading_address_town = trading_address_town

    @property
    def trading_address_county(self):
        """
        Gets the trading_address_county of this Company.

        :return: The trading_address_county of this Company.
        :rtype: str
        """
        return self._trading_address_county

    @trading_address_county.setter
    def trading_address_county(self, trading_address_county):
        """
        Sets the trading_address_county of this Company.

        :param trading_address_county: The trading_address_county of this Company.
        :type: str
        """

        self._trading_address_county = trading_address_county

    @property
    def trading_address_postcode(self):
        """
        Gets the trading_address_postcode of this Company.

        :return: The trading_address_postcode of this Company.
        :rtype: str
        """
        return self._trading_address_postcode

    @trading_address_postcode.setter
    def trading_address_postcode(self, trading_address_postcode):
        """
        Sets the trading_address_postcode of this Company.

        :param trading_address_postcode: The trading_address_postcode of this Company.
        :type: str
        """

        self._trading_address_postcode = trading_address_postcode

    @property
    def account_manager(self):
        """
        Gets the account_manager of this Company.

        :return: The account_manager of this Company.
        :rtype: Adviser
        """
        return self._account_manager

    @account_manager.setter
    def account_manager(self, account_manager):
        """
        Sets the account_manager of this Company.

        :param account_manager: The account_manager of this Company.
        :type: Adviser
        """

        self._account_manager = account_manager

    @property
    def archived_by(self):
        """
        Gets the archived_by of this Company.

        :return: The archived_by of this Company.
        :rtype: Adviser
        """
        return self._archived_by

    @archived_by.setter
    def archived_by(self, archived_by):
        """
        Sets the archived_by of this Company.

        :param archived_by: The archived_by of this Company.
        :type: Adviser
        """

        self._archived_by = archived_by

    @property
    def business_type(self):
        """
        Gets the business_type of this Company.

        :return: The business_type of this Company.
        :rtype: BusinessType
        """
        return self._business_type

    @business_type.setter
    def business_type(self, business_type):
        """
        Sets the business_type of this Company.

        :param business_type: The business_type of this Company.
        :type: BusinessType
        """

        self._business_type = business_type

    @property
    def children(self):
        """
        Gets the children of this Company.

        :return: The children of this Company.
        :rtype: CompanyKeyArray
        """
        return self._children

    @children.setter
    def children(self, children):
        """
        Sets the children of this Company.

        :param children: The children of this Company.
        :type: CompanyKeyArray
        """

        self._children = children

    @property
    def classification(self):
        """
        Gets the classification of this Company.

        :return: The classification of this Company.
        :rtype: Classification
        """
        return self._classification

    @classification.setter
    def classification(self, classification):
        """
        Sets the classification of this Company.

        :param classification: The classification of this Company.
        :type: Classification
        """

        self._classification = classification

    @property
    def companies_house_data(self):
        """
        Gets the companies_house_data of this Company.

        :return: The companies_house_data of this Company.
        :rtype: CompaniesHouseCompany
        """
        return self._companies_house_data

    @companies_house_data.setter
    def companies_house_data(self, companies_house_data):
        """
        Sets the companies_house_data of this Company.

        :param companies_house_data: The companies_house_data of this Company.
        :type: CompaniesHouseCompany
        """

        self._companies_house_data = companies_house_data

    @property
    def contacts(self):
        """
        Gets the contacts of this Company.

        :return: The contacts of this Company.
        :rtype: ContactArray
        """
        return self._contacts

    @contacts.setter
    def contacts(self, contacts):
        """
        Sets the contacts of this Company.

        :param contacts: The contacts of this Company.
        :type: ContactArray
        """

        self._contacts = contacts

    @property
    def employee_range(self):
        """
        Gets the employee_range of this Company.

        :return: The employee_range of this Company.
        :rtype: EmployeeRange
        """
        return self._employee_range

    @employee_range.setter
    def employee_range(self, employee_range):
        """
        Sets the employee_range of this Company.

        :param employee_range: The employee_range of this Company.
        :type: EmployeeRange
        """

        self._employee_range = employee_range

    @property
    def export_to_countries(self):
        """
        Gets the export_to_countries of this Company.

        :return: The export_to_countries of this Company.
        :rtype: CountryArray
        """
        return self._export_to_countries

    @export_to_countries.setter
    def export_to_countries(self, export_to_countries):
        """
        Sets the export_to_countries of this Company.

        :param export_to_countries: The export_to_countries of this Company.
        :type: CountryArray
        """

        self._export_to_countries = export_to_countries

    @property
    def future_interest_countries(self):
        """
        Gets the future_interest_countries of this Company.

        :return: The future_interest_countries of this Company.
        :rtype: CountryArray
        """
        return self._future_interest_countries

    @future_interest_countries.setter
    def future_interest_countries(self, future_interest_countries):
        """
        Sets the future_interest_countries of this Company.

        :param future_interest_countries: The future_interest_countries of this Company.
        :type: CountryArray
        """

        self._future_interest_countries = future_interest_countries

    @property
    def headquarter_type(self):
        """
        Gets the headquarter_type of this Company.

        :return: The headquarter_type of this Company.
        :rtype: HeadquarterType
        """
        return self._headquarter_type

    @headquarter_type.setter
    def headquarter_type(self, headquarter_type):
        """
        Sets the headquarter_type of this Company.

        :param headquarter_type: The headquarter_type of this Company.
        :type: HeadquarterType
        """

        self._headquarter_type = headquarter_type

    @property
    def one_list_account_owner(self):
        """
        Gets the one_list_account_owner of this Company.

        :return: The one_list_account_owner of this Company.
        :rtype: Adviser
        """
        return self._one_list_account_owner

    @one_list_account_owner.setter
    def one_list_account_owner(self, one_list_account_owner):
        """
        Sets the one_list_account_owner of this Company.

        :param one_list_account_owner: The one_list_account_owner of this Company.
        :type: Adviser
        """

        self._one_list_account_owner = one_list_account_owner

    @property
    def parent(self):
        """
        Gets the parent of this Company.

        :return: The parent of this Company.
        :rtype: CompanySlim
        """
        return self._parent

    @parent.setter
    def parent(self, parent):
        """
        Sets the parent of this Company.

        :param parent: The parent of this Company.
        :type: CompanySlim
        """

        self._parent = parent

    @property
    def registered_address_country(self):
        """
        Gets the registered_address_country of this Company.

        :return: The registered_address_country of this Company.
        :rtype: Country
        """
        return self._registered_address_country

    @registered_address_country.setter
    def registered_address_country(self, registered_address_country):
        """
        Sets the registered_address_country of this Company.

        :param registered_address_country: The registered_address_country of this Company.
        :type: Country
        """

        self._registered_address_country = registered_address_country

    @property
    def sector(self):
        """
        Gets the sector of this Company.

        :return: The sector of this Company.
        :rtype: Sector
        """
        return self._sector

    @sector.setter
    def sector(self, sector):
        """
        Sets the sector of this Company.

        :param sector: The sector of this Company.
        :type: Sector
        """

        self._sector = sector

    @property
    def trading_address_country(self):
        """
        Gets the trading_address_country of this Company.

        :return: The trading_address_country of this Company.
        :rtype: Country
        """
        return self._trading_address_country

    @trading_address_country.setter
    def trading_address_country(self, trading_address_country):
        """
        Sets the trading_address_country of this Company.

        :param trading_address_country: The trading_address_country of this Company.
        :type: Country
        """

        self._trading_address_country = trading_address_country

    @property
    def turnover_range(self):
        """
        Gets the turnover_range of this Company.

        :return: The turnover_range of this Company.
        :rtype: TurnoverRange
        """
        return self._turnover_range

    @turnover_range.setter
    def turnover_range(self, turnover_range):
        """
        Sets the turnover_range of this Company.

        :param turnover_range: The turnover_range of this Company.
        :type: TurnoverRange
        """

        self._turnover_range = turnover_range

    @property
    def uk_region(self):
        """
        Gets the uk_region of this Company.

        :return: The uk_region of this Company.
        :rtype: UKRegion
        """
        return self._uk_region

    @uk_region.setter
    def uk_region(self, uk_region):
        """
        Sets the uk_region of this Company.

        :param uk_region: The uk_region of this Company.
        :type: UKRegion
        """

        self._uk_region = uk_region

    @property
    def investment_projects_invested_in(self):
        """
        Gets the investment_projects_invested_in of this Company.

        :return: The investment_projects_invested_in of this Company.
        :rtype: InvestmentProjectsList
        """
        return self._investment_projects_invested_in

    @investment_projects_invested_in.setter
    def investment_projects_invested_in(self, investment_projects_invested_in):
        """
        Sets the investment_projects_invested_in of this Company.

        :param investment_projects_invested_in: The investment_projects_invested_in of this Company.
        :type: InvestmentProjectsList
        """

        self._investment_projects_invested_in = investment_projects_invested_in

    @property
    def investment_projects_invested_in_count(self):
        """
        Gets the investment_projects_invested_in_count of this Company.

        :return: The investment_projects_invested_in_count of this Company.
        :rtype: int
        """
        return self._investment_projects_invested_in_count

    @investment_projects_invested_in_count.setter
    def investment_projects_invested_in_count(self, investment_projects_invested_in_count):
        """
        Sets the investment_projects_invested_in_count of this Company.

        :param investment_projects_invested_in_count: The investment_projects_invested_in_count of this Company.
        :type: int
        """

        self._investment_projects_invested_in_count = investment_projects_invested_in_count

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Company):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
