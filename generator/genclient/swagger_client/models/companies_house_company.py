# coding: utf-8

"""
    Data Hub API

    Data Hub API

    OpenAPI spec version: 1.0.0
    Contact: jim.smith@digital.trade.gov.uk
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class CompaniesHouseCompany(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, name=None, registered_address_1=None, registered_address_2=None, registered_address_town=None, registered_address_county=None, registered_address_postcode=None, company_number=None, company_category=None, company_status=None, sic_code_1=None, sic_code_2=None, sic_code_3=None, sic_code_4=None, uri=None, incorporation_date=None):
        """
        CompaniesHouseCompany - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'name': 'str',
            'registered_address_1': 'str',
            'registered_address_2': 'str',
            'registered_address_town': 'str',
            'registered_address_county': 'str',
            'registered_address_postcode': 'str',
            'company_number': 'str',
            'company_category': 'str',
            'company_status': 'str',
            'sic_code_1': 'str',
            'sic_code_2': 'str',
            'sic_code_3': 'str',
            'sic_code_4': 'str',
            'uri': 'str',
            'incorporation_date': 'datetime'
        }

        self.attribute_map = {
            'name': 'name',
            'registered_address_1': 'registered_address_1',
            'registered_address_2': 'registered_address_2',
            'registered_address_town': 'registered_address_town',
            'registered_address_county': 'registered_address_county',
            'registered_address_postcode': 'registered_address_postcode',
            'company_number': 'company_number',
            'company_category': 'company_category',
            'company_status': 'company_status',
            'sic_code_1': 'sic_code_1',
            'sic_code_2': 'sic_code_2',
            'sic_code_3': 'sic_code_3',
            'sic_code_4': 'sic_code_4',
            'uri': 'uri',
            'incorporation_date': 'incorporation_date'
        }

        self._name = name
        self._registered_address_1 = registered_address_1
        self._registered_address_2 = registered_address_2
        self._registered_address_town = registered_address_town
        self._registered_address_county = registered_address_county
        self._registered_address_postcode = registered_address_postcode
        self._company_number = company_number
        self._company_category = company_category
        self._company_status = company_status
        self._sic_code_1 = sic_code_1
        self._sic_code_2 = sic_code_2
        self._sic_code_3 = sic_code_3
        self._sic_code_4 = sic_code_4
        self._uri = uri
        self._incorporation_date = incorporation_date

    @property
    def name(self):
        """
        Gets the name of this CompaniesHouseCompany.

        :return: The name of this CompaniesHouseCompany.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this CompaniesHouseCompany.

        :param name: The name of this CompaniesHouseCompany.
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def registered_address_1(self):
        """
        Gets the registered_address_1 of this CompaniesHouseCompany.

        :return: The registered_address_1 of this CompaniesHouseCompany.
        :rtype: str
        """
        return self._registered_address_1

    @registered_address_1.setter
    def registered_address_1(self, registered_address_1):
        """
        Sets the registered_address_1 of this CompaniesHouseCompany.

        :param registered_address_1: The registered_address_1 of this CompaniesHouseCompany.
        :type: str
        """
        if registered_address_1 is None:
            raise ValueError("Invalid value for `registered_address_1`, must not be `None`")

        self._registered_address_1 = registered_address_1

    @property
    def registered_address_2(self):
        """
        Gets the registered_address_2 of this CompaniesHouseCompany.

        :return: The registered_address_2 of this CompaniesHouseCompany.
        :rtype: str
        """
        return self._registered_address_2

    @registered_address_2.setter
    def registered_address_2(self, registered_address_2):
        """
        Sets the registered_address_2 of this CompaniesHouseCompany.

        :param registered_address_2: The registered_address_2 of this CompaniesHouseCompany.
        :type: str
        """

        self._registered_address_2 = registered_address_2

    @property
    def registered_address_town(self):
        """
        Gets the registered_address_town of this CompaniesHouseCompany.

        :return: The registered_address_town of this CompaniesHouseCompany.
        :rtype: str
        """
        return self._registered_address_town

    @registered_address_town.setter
    def registered_address_town(self, registered_address_town):
        """
        Sets the registered_address_town of this CompaniesHouseCompany.

        :param registered_address_town: The registered_address_town of this CompaniesHouseCompany.
        :type: str
        """
        if registered_address_town is None:
            raise ValueError("Invalid value for `registered_address_town`, must not be `None`")

        self._registered_address_town = registered_address_town

    @property
    def registered_address_county(self):
        """
        Gets the registered_address_county of this CompaniesHouseCompany.

        :return: The registered_address_county of this CompaniesHouseCompany.
        :rtype: str
        """
        return self._registered_address_county

    @registered_address_county.setter
    def registered_address_county(self, registered_address_county):
        """
        Sets the registered_address_county of this CompaniesHouseCompany.

        :param registered_address_county: The registered_address_county of this CompaniesHouseCompany.
        :type: str
        """

        self._registered_address_county = registered_address_county

    @property
    def registered_address_postcode(self):
        """
        Gets the registered_address_postcode of this CompaniesHouseCompany.

        :return: The registered_address_postcode of this CompaniesHouseCompany.
        :rtype: str
        """
        return self._registered_address_postcode

    @registered_address_postcode.setter
    def registered_address_postcode(self, registered_address_postcode):
        """
        Sets the registered_address_postcode of this CompaniesHouseCompany.

        :param registered_address_postcode: The registered_address_postcode of this CompaniesHouseCompany.
        :type: str
        """

        self._registered_address_postcode = registered_address_postcode

    @property
    def company_number(self):
        """
        Gets the company_number of this CompaniesHouseCompany.

        :return: The company_number of this CompaniesHouseCompany.
        :rtype: str
        """
        return self._company_number

    @company_number.setter
    def company_number(self, company_number):
        """
        Sets the company_number of this CompaniesHouseCompany.

        :param company_number: The company_number of this CompaniesHouseCompany.
        :type: str
        """
        if company_number is None:
            raise ValueError("Invalid value for `company_number`, must not be `None`")

        self._company_number = company_number

    @property
    def company_category(self):
        """
        Gets the company_category of this CompaniesHouseCompany.

        :return: The company_category of this CompaniesHouseCompany.
        :rtype: str
        """
        return self._company_category

    @company_category.setter
    def company_category(self, company_category):
        """
        Sets the company_category of this CompaniesHouseCompany.

        :param company_category: The company_category of this CompaniesHouseCompany.
        :type: str
        """

        self._company_category = company_category

    @property
    def company_status(self):
        """
        Gets the company_status of this CompaniesHouseCompany.

        :return: The company_status of this CompaniesHouseCompany.
        :rtype: str
        """
        return self._company_status

    @company_status.setter
    def company_status(self, company_status):
        """
        Sets the company_status of this CompaniesHouseCompany.

        :param company_status: The company_status of this CompaniesHouseCompany.
        :type: str
        """

        self._company_status = company_status

    @property
    def sic_code_1(self):
        """
        Gets the sic_code_1 of this CompaniesHouseCompany.

        :return: The sic_code_1 of this CompaniesHouseCompany.
        :rtype: str
        """
        return self._sic_code_1

    @sic_code_1.setter
    def sic_code_1(self, sic_code_1):
        """
        Sets the sic_code_1 of this CompaniesHouseCompany.

        :param sic_code_1: The sic_code_1 of this CompaniesHouseCompany.
        :type: str
        """

        self._sic_code_1 = sic_code_1

    @property
    def sic_code_2(self):
        """
        Gets the sic_code_2 of this CompaniesHouseCompany.

        :return: The sic_code_2 of this CompaniesHouseCompany.
        :rtype: str
        """
        return self._sic_code_2

    @sic_code_2.setter
    def sic_code_2(self, sic_code_2):
        """
        Sets the sic_code_2 of this CompaniesHouseCompany.

        :param sic_code_2: The sic_code_2 of this CompaniesHouseCompany.
        :type: str
        """

        self._sic_code_2 = sic_code_2

    @property
    def sic_code_3(self):
        """
        Gets the sic_code_3 of this CompaniesHouseCompany.

        :return: The sic_code_3 of this CompaniesHouseCompany.
        :rtype: str
        """
        return self._sic_code_3

    @sic_code_3.setter
    def sic_code_3(self, sic_code_3):
        """
        Sets the sic_code_3 of this CompaniesHouseCompany.

        :param sic_code_3: The sic_code_3 of this CompaniesHouseCompany.
        :type: str
        """

        self._sic_code_3 = sic_code_3

    @property
    def sic_code_4(self):
        """
        Gets the sic_code_4 of this CompaniesHouseCompany.

        :return: The sic_code_4 of this CompaniesHouseCompany.
        :rtype: str
        """
        return self._sic_code_4

    @sic_code_4.setter
    def sic_code_4(self, sic_code_4):
        """
        Sets the sic_code_4 of this CompaniesHouseCompany.

        :param sic_code_4: The sic_code_4 of this CompaniesHouseCompany.
        :type: str
        """

        self._sic_code_4 = sic_code_4

    @property
    def uri(self):
        """
        Gets the uri of this CompaniesHouseCompany.

        :return: The uri of this CompaniesHouseCompany.
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """
        Sets the uri of this CompaniesHouseCompany.

        :param uri: The uri of this CompaniesHouseCompany.
        :type: str
        """

        self._uri = uri

    @property
    def incorporation_date(self):
        """
        Gets the incorporation_date of this CompaniesHouseCompany.

        :return: The incorporation_date of this CompaniesHouseCompany.
        :rtype: datetime
        """
        return self._incorporation_date

    @incorporation_date.setter
    def incorporation_date(self, incorporation_date):
        """
        Sets the incorporation_date of this CompaniesHouseCompany.

        :param incorporation_date: The incorporation_date of this CompaniesHouseCompany.
        :type: datetime
        """

        self._incorporation_date = incorporation_date

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, CompaniesHouseCompany):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
