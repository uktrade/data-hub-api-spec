# coding: utf-8

"""
    Data Hub API

    Data Hub API

    OpenAPI spec version: 1.0.0
    Contact: jim.smith@digital.trade.gov.uk
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class CompanyExclusionFilters(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, alias=None, export_to_country=None, future_interest_country=None, name=None, sector=None, trading_address_town=None, trading_address_country=None, trading_address_postcode=None, uk_based=None, uk_region=None):
        """
        CompanyExclusionFilters - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'alias': 'str',
            'export_to_country': 'str',
            'future_interest_country': 'str',
            'name': 'str',
            'sector': 'str',
            'trading_address_town': 'str',
            'trading_address_country': 'str',
            'trading_address_postcode': 'str',
            'uk_based': 'bool',
            'uk_region': 'str'
        }

        self.attribute_map = {
            'alias': 'alias',
            'export_to_country': 'export_to_country',
            'future_interest_country': 'future_interest_country',
            'name': 'name',
            'sector': 'sector',
            'trading_address_town': 'trading_address_town',
            'trading_address_country': 'trading_address_country',
            'trading_address_postcode': 'trading_address_postcode',
            'uk_based': 'uk_based',
            'uk_region': 'uk_region'
        }

        self._alias = alias
        self._export_to_country = export_to_country
        self._future_interest_country = future_interest_country
        self._name = name
        self._sector = sector
        self._trading_address_town = trading_address_town
        self._trading_address_country = trading_address_country
        self._trading_address_postcode = trading_address_postcode
        self._uk_based = uk_based
        self._uk_region = uk_region

    @property
    def alias(self):
        """
        Gets the alias of this CompanyExclusionFilters.

        :return: The alias of this CompanyExclusionFilters.
        :rtype: str
        """
        return self._alias

    @alias.setter
    def alias(self, alias):
        """
        Sets the alias of this CompanyExclusionFilters.

        :param alias: The alias of this CompanyExclusionFilters.
        :type: str
        """

        self._alias = alias

    @property
    def export_to_country(self):
        """
        Gets the export_to_country of this CompanyExclusionFilters.

        :return: The export_to_country of this CompanyExclusionFilters.
        :rtype: str
        """
        return self._export_to_country

    @export_to_country.setter
    def export_to_country(self, export_to_country):
        """
        Sets the export_to_country of this CompanyExclusionFilters.

        :param export_to_country: The export_to_country of this CompanyExclusionFilters.
        :type: str
        """

        self._export_to_country = export_to_country

    @property
    def future_interest_country(self):
        """
        Gets the future_interest_country of this CompanyExclusionFilters.

        :return: The future_interest_country of this CompanyExclusionFilters.
        :rtype: str
        """
        return self._future_interest_country

    @future_interest_country.setter
    def future_interest_country(self, future_interest_country):
        """
        Sets the future_interest_country of this CompanyExclusionFilters.

        :param future_interest_country: The future_interest_country of this CompanyExclusionFilters.
        :type: str
        """

        self._future_interest_country = future_interest_country

    @property
    def name(self):
        """
        Gets the name of this CompanyExclusionFilters.

        :return: The name of this CompanyExclusionFilters.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this CompanyExclusionFilters.

        :param name: The name of this CompanyExclusionFilters.
        :type: str
        """

        self._name = name

    @property
    def sector(self):
        """
        Gets the sector of this CompanyExclusionFilters.

        :return: The sector of this CompanyExclusionFilters.
        :rtype: str
        """
        return self._sector

    @sector.setter
    def sector(self, sector):
        """
        Sets the sector of this CompanyExclusionFilters.

        :param sector: The sector of this CompanyExclusionFilters.
        :type: str
        """

        self._sector = sector

    @property
    def trading_address_town(self):
        """
        Gets the trading_address_town of this CompanyExclusionFilters.

        :return: The trading_address_town of this CompanyExclusionFilters.
        :rtype: str
        """
        return self._trading_address_town

    @trading_address_town.setter
    def trading_address_town(self, trading_address_town):
        """
        Sets the trading_address_town of this CompanyExclusionFilters.

        :param trading_address_town: The trading_address_town of this CompanyExclusionFilters.
        :type: str
        """

        self._trading_address_town = trading_address_town

    @property
    def trading_address_country(self):
        """
        Gets the trading_address_country of this CompanyExclusionFilters.

        :return: The trading_address_country of this CompanyExclusionFilters.
        :rtype: str
        """
        return self._trading_address_country

    @trading_address_country.setter
    def trading_address_country(self, trading_address_country):
        """
        Sets the trading_address_country of this CompanyExclusionFilters.

        :param trading_address_country: The trading_address_country of this CompanyExclusionFilters.
        :type: str
        """

        self._trading_address_country = trading_address_country

    @property
    def trading_address_postcode(self):
        """
        Gets the trading_address_postcode of this CompanyExclusionFilters.

        :return: The trading_address_postcode of this CompanyExclusionFilters.
        :rtype: str
        """
        return self._trading_address_postcode

    @trading_address_postcode.setter
    def trading_address_postcode(self, trading_address_postcode):
        """
        Sets the trading_address_postcode of this CompanyExclusionFilters.

        :param trading_address_postcode: The trading_address_postcode of this CompanyExclusionFilters.
        :type: str
        """

        self._trading_address_postcode = trading_address_postcode

    @property
    def uk_based(self):
        """
        Gets the uk_based of this CompanyExclusionFilters.

        :return: The uk_based of this CompanyExclusionFilters.
        :rtype: bool
        """
        return self._uk_based

    @uk_based.setter
    def uk_based(self, uk_based):
        """
        Sets the uk_based of this CompanyExclusionFilters.

        :param uk_based: The uk_based of this CompanyExclusionFilters.
        :type: bool
        """

        self._uk_based = uk_based

    @property
    def uk_region(self):
        """
        Gets the uk_region of this CompanyExclusionFilters.

        :return: The uk_region of this CompanyExclusionFilters.
        :rtype: str
        """
        return self._uk_region

    @uk_region.setter
    def uk_region(self, uk_region):
        """
        Sets the uk_region of this CompanyExclusionFilters.

        :param uk_region: The uk_region of this CompanyExclusionFilters.
        :type: str
        """

        self._uk_region = uk_region

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, CompanyExclusionFilters):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
