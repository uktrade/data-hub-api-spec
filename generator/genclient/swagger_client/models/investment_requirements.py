# coding: utf-8

"""
    Data Hub API

    Data Hub API

    OpenAPI spec version: 1.0.0
    Contact: jim.smith@digital.trade.gov.uk
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class InvestmentRequirements(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, requirements_complete=None, client_requirements=None, site_decided=False, address_line_1=None, address_line_2=None, address_line_3=None, address_postcode=None, client_considering_other_countries=None, competitor_countries=None, uk_region_locations=None, strategic_drivers=None, uk_company=None):
        """
        InvestmentRequirements - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'requirements_complete': 'bool',
            'client_requirements': 'str',
            'site_decided': 'bool',
            'address_line_1': 'str',
            'address_line_2': 'str',
            'address_line_3': 'str',
            'address_postcode': 'str',
            'client_considering_other_countries': 'bool',
            'competitor_countries': 'CountryArray',
            'uk_region_locations': 'UKRegions',
            'strategic_drivers': 'StrategicDriverArray',
            'uk_company': 'CompanySlim'
        }

        self.attribute_map = {
            'requirements_complete': 'requirements_complete',
            'client_requirements': 'client_requirements',
            'site_decided': 'site_decided',
            'address_line_1': 'address_line_1',
            'address_line_2': 'address_line_2',
            'address_line_3': 'address_line_3',
            'address_postcode': 'address_postcode',
            'client_considering_other_countries': 'client_considering_other_countries',
            'competitor_countries': 'competitor_countries',
            'uk_region_locations': 'uk_region_locations',
            'strategic_drivers': 'strategic_drivers',
            'uk_company': 'uk_company'
        }

        self._requirements_complete = requirements_complete
        self._client_requirements = client_requirements
        self._site_decided = site_decided
        self._address_line_1 = address_line_1
        self._address_line_2 = address_line_2
        self._address_line_3 = address_line_3
        self._address_postcode = address_postcode
        self._client_considering_other_countries = client_considering_other_countries
        self._competitor_countries = competitor_countries
        self._uk_region_locations = uk_region_locations
        self._strategic_drivers = strategic_drivers
        self._uk_company = uk_company

    @property
    def requirements_complete(self):
        """
        Gets the requirements_complete of this InvestmentRequirements.

        :return: The requirements_complete of this InvestmentRequirements.
        :rtype: bool
        """
        return self._requirements_complete

    @requirements_complete.setter
    def requirements_complete(self, requirements_complete):
        """
        Sets the requirements_complete of this InvestmentRequirements.

        :param requirements_complete: The requirements_complete of this InvestmentRequirements.
        :type: bool
        """

        self._requirements_complete = requirements_complete

    @property
    def client_requirements(self):
        """
        Gets the client_requirements of this InvestmentRequirements.

        :return: The client_requirements of this InvestmentRequirements.
        :rtype: str
        """
        return self._client_requirements

    @client_requirements.setter
    def client_requirements(self, client_requirements):
        """
        Sets the client_requirements of this InvestmentRequirements.

        :param client_requirements: The client_requirements of this InvestmentRequirements.
        :type: str
        """

        self._client_requirements = client_requirements

    @property
    def site_decided(self):
        """
        Gets the site_decided of this InvestmentRequirements.

        :return: The site_decided of this InvestmentRequirements.
        :rtype: bool
        """
        return self._site_decided

    @site_decided.setter
    def site_decided(self, site_decided):
        """
        Sets the site_decided of this InvestmentRequirements.

        :param site_decided: The site_decided of this InvestmentRequirements.
        :type: bool
        """

        self._site_decided = site_decided

    @property
    def address_line_1(self):
        """
        Gets the address_line_1 of this InvestmentRequirements.

        :return: The address_line_1 of this InvestmentRequirements.
        :rtype: str
        """
        return self._address_line_1

    @address_line_1.setter
    def address_line_1(self, address_line_1):
        """
        Sets the address_line_1 of this InvestmentRequirements.

        :param address_line_1: The address_line_1 of this InvestmentRequirements.
        :type: str
        """

        self._address_line_1 = address_line_1

    @property
    def address_line_2(self):
        """
        Gets the address_line_2 of this InvestmentRequirements.

        :return: The address_line_2 of this InvestmentRequirements.
        :rtype: str
        """
        return self._address_line_2

    @address_line_2.setter
    def address_line_2(self, address_line_2):
        """
        Sets the address_line_2 of this InvestmentRequirements.

        :param address_line_2: The address_line_2 of this InvestmentRequirements.
        :type: str
        """

        self._address_line_2 = address_line_2

    @property
    def address_line_3(self):
        """
        Gets the address_line_3 of this InvestmentRequirements.

        :return: The address_line_3 of this InvestmentRequirements.
        :rtype: str
        """
        return self._address_line_3

    @address_line_3.setter
    def address_line_3(self, address_line_3):
        """
        Sets the address_line_3 of this InvestmentRequirements.

        :param address_line_3: The address_line_3 of this InvestmentRequirements.
        :type: str
        """

        self._address_line_3 = address_line_3

    @property
    def address_postcode(self):
        """
        Gets the address_postcode of this InvestmentRequirements.

        :return: The address_postcode of this InvestmentRequirements.
        :rtype: str
        """
        return self._address_postcode

    @address_postcode.setter
    def address_postcode(self, address_postcode):
        """
        Sets the address_postcode of this InvestmentRequirements.

        :param address_postcode: The address_postcode of this InvestmentRequirements.
        :type: str
        """

        self._address_postcode = address_postcode

    @property
    def client_considering_other_countries(self):
        """
        Gets the client_considering_other_countries of this InvestmentRequirements.

        :return: The client_considering_other_countries of this InvestmentRequirements.
        :rtype: bool
        """
        return self._client_considering_other_countries

    @client_considering_other_countries.setter
    def client_considering_other_countries(self, client_considering_other_countries):
        """
        Sets the client_considering_other_countries of this InvestmentRequirements.

        :param client_considering_other_countries: The client_considering_other_countries of this InvestmentRequirements.
        :type: bool
        """

        self._client_considering_other_countries = client_considering_other_countries

    @property
    def competitor_countries(self):
        """
        Gets the competitor_countries of this InvestmentRequirements.

        :return: The competitor_countries of this InvestmentRequirements.
        :rtype: CountryArray
        """
        return self._competitor_countries

    @competitor_countries.setter
    def competitor_countries(self, competitor_countries):
        """
        Sets the competitor_countries of this InvestmentRequirements.

        :param competitor_countries: The competitor_countries of this InvestmentRequirements.
        :type: CountryArray
        """

        self._competitor_countries = competitor_countries

    @property
    def uk_region_locations(self):
        """
        Gets the uk_region_locations of this InvestmentRequirements.

        :return: The uk_region_locations of this InvestmentRequirements.
        :rtype: UKRegions
        """
        return self._uk_region_locations

    @uk_region_locations.setter
    def uk_region_locations(self, uk_region_locations):
        """
        Sets the uk_region_locations of this InvestmentRequirements.

        :param uk_region_locations: The uk_region_locations of this InvestmentRequirements.
        :type: UKRegions
        """

        self._uk_region_locations = uk_region_locations

    @property
    def strategic_drivers(self):
        """
        Gets the strategic_drivers of this InvestmentRequirements.

        :return: The strategic_drivers of this InvestmentRequirements.
        :rtype: StrategicDriverArray
        """
        return self._strategic_drivers

    @strategic_drivers.setter
    def strategic_drivers(self, strategic_drivers):
        """
        Sets the strategic_drivers of this InvestmentRequirements.

        :param strategic_drivers: The strategic_drivers of this InvestmentRequirements.
        :type: StrategicDriverArray
        """

        self._strategic_drivers = strategic_drivers

    @property
    def uk_company(self):
        """
        Gets the uk_company of this InvestmentRequirements.

        :return: The uk_company of this InvestmentRequirements.
        :rtype: CompanySlim
        """
        return self._uk_company

    @uk_company.setter
    def uk_company(self, uk_company):
        """
        Sets the uk_company of this InvestmentRequirements.

        :param uk_company: The uk_company of this InvestmentRequirements.
        :type: CompanySlim
        """

        self._uk_company = uk_company

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, InvestmentRequirements):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
