# coding: utf-8

"""
    Data Hub API

    Data Hub API

    OpenAPI spec version: 1.0.0
    Contact: jim.smith@digital.trade.gov.uk
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class CompanyApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def add_company(self, company, **kwargs):
        """
        adds a Data Hub company
        Adds a Data Hub company from a Companies House company
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.add_company(company, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param Company company: Company to add (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.add_company_with_http_info(company, **kwargs)
        else:
            (data) = self.add_company_with_http_info(company, **kwargs)
            return data

    def add_company_with_http_info(self, company, **kwargs):
        """
        adds a Data Hub company
        Adds a Data Hub company from a Companies House company
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.add_company_with_http_info(company, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param Company company: Company to add (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['company']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_company" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'company' is set
        if ('company' not in params) or (params['company'] is None):
            raise ValueError("Missing the required parameter `company` when calling `add_company`")


        collection_formats = {}

        resource_path = '/company'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'company' in params:
            body_params = params['company']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['OauthSecurity']

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def getchcompany(self, company_number, **kwargs):
        """
        Returns a Companies House company from the Data Hub repository
        Passing in a Companies House company number returns a Data Hub Companies House company object 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.getchcompany(company_number, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str company_number: Companies House number (required)
        :return: CompaniesHouseCompany
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.getchcompany_with_http_info(company_number, **kwargs)
        else:
            (data) = self.getchcompany_with_http_info(company_number, **kwargs)
            return data

    def getchcompany_with_http_info(self, company_number, **kwargs):
        """
        Returns a Companies House company from the Data Hub repository
        Passing in a Companies House company number returns a Data Hub Companies House company object 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.getchcompany_with_http_info(company_number, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str company_number: Companies House number (required)
        :return: CompaniesHouseCompany
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['company_number']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method getchcompany" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'company_number' is set
        if ('company_number' not in params) or (params['company_number'] is None):
            raise ValueError("Missing the required parameter `company_number` when calling `getchcompany`")


        collection_formats = {}

        resource_path = '/ch_company/{company_number}'.replace('{format}', 'json')
        path_params = {}
        if 'company_number' in params:
            path_params['company_number'] = params['company_number']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['OauthSecurity']

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='CompaniesHouseCompany',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def getcompany(self, company_id, **kwargs):
        """
        Returns a company from the Data Hub repository
        Passing in a company UUID returns a Data Hub company object 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.getcompany(company_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str company_id: UUID for a Data Hub company (required)
        :return: Company
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.getcompany_with_http_info(company_id, **kwargs)
        else:
            (data) = self.getcompany_with_http_info(company_id, **kwargs)
            return data

    def getcompany_with_http_info(self, company_id, **kwargs):
        """
        Returns a company from the Data Hub repository
        Passing in a company UUID returns a Data Hub company object 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.getcompany_with_http_info(company_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str company_id: UUID for a Data Hub company (required)
        :return: Company
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['company_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method getcompany" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'company_id' is set
        if ('company_id' not in params) or (params['company_id'] is None):
            raise ValueError("Missing the required parameter `company_id` when calling `getcompany`")


        collection_formats = {}

        resource_path = '/company/{companyId}'.replace('{format}', 'json')
        path_params = {}
        if 'company_id' in params:
            path_params['companyId'] = params['company_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['OauthSecurity']

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Company',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def update_company(self, company_id, company, **kwargs):
        """
        updates a company, creating a new one if not found
        Updates an existing company
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_company(company_id, company, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str company_id: UUID for a Data Hub company (required)
        :param Company company: Company data to update (required)
        :param bool archived: Update the company's status to Archived
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.update_company_with_http_info(company_id, company, **kwargs)
        else:
            (data) = self.update_company_with_http_info(company_id, company, **kwargs)
            return data

    def update_company_with_http_info(self, company_id, company, **kwargs):
        """
        updates a company, creating a new one if not found
        Updates an existing company
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_company_with_http_info(company_id, company, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str company_id: UUID for a Data Hub company (required)
        :param Company company: Company data to update (required)
        :param bool archived: Update the company's status to Archived
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['company_id', 'company', 'archived']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_company" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'company_id' is set
        if ('company_id' not in params) or (params['company_id'] is None):
            raise ValueError("Missing the required parameter `company_id` when calling `update_company`")
        # verify the required parameter 'company' is set
        if ('company' not in params) or (params['company'] is None):
            raise ValueError("Missing the required parameter `company` when calling `update_company`")


        collection_formats = {}

        resource_path = '/company/{companyId}'.replace('{format}', 'json')
        path_params = {}
        if 'company_id' in params:
            path_params['companyId'] = params['company_id']

        query_params = {}
        if 'archived' in params:
            query_params['Archived'] = params['archived']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'company' in params:
            body_params = params['company']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['OauthSecurity']

        return self.api_client.call_api(resource_path, 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
